(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{315:function(e,n,t){"use strict";t.r(n);var r=[function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​                                                                                              "),n("strong",[e._v("Vue的渲染机制")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("一、Vue的渲染是在生命周期哪个阶段完成？")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/1.6e1e57be.jpg",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("从图中我们可以看到， "),n("code",[e._v("Vue")]),e._v(" 实例的生命周期大致可分为4个阶段：")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("初始化阶段：为"),n("code",[e._v("Vue")]),e._v("实例上初始化一些属性，事件以及响应式数据；")]),n("li",[n("strong",[e._v("模板编译阶段：将模板编译成渲染函数；")])]),n("li",[n("strong",[e._v("挂载阶段：将实例挂载到指定的"),n("code",[e._v("DOM")]),e._v("上，即将模板渲染到真实"),n("code",[e._v("DOM")]),e._v("中；")])]),n("li",[e._v("销毁阶段：将实例自身从父组件中删除，并取消依赖追踪及事件监听器；")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("二、渲染流程")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/1.f0570125.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t渲染流程，就是把用户写的类似于原生 "),n("code",[e._v("HTML")]),e._v(" 的模板经过一系列处理最终反应到视图中称之为整个渲染流程，从图中我们也可以看到，模板编译过程就是把用户写的模板经过一系列处理最终生成 "),n("code",[e._v("render")]),e._v(" 函数的过程。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("三、模板编译")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("1、用户写的模板")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:t(339),alt:"20200906205828744"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:t(340),alt:"444"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:t(341),alt:"20200906211151458"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:t(342),alt:"20200906211828100"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t如果我们尝试在template标签下写两个div，那么编辑器会提示我们 "),n("code",[e._v("The template root requires exactly one element")]),e._v(" 。那这里为什么template下也必须有且只能有一个div呢？")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",[n("li",[e._v("隐藏性：该标签不会显示在页面的任何地方，即便里面有多少内容，它永远都是隐藏的状态；")]),n("li",[e._v("任意性：该标签可以写在页面的任何地方，甚至是head、body、sciprt标签内；")]),n("li",[e._v("无效性：该标签里的任何HTML内容都是无效的，不会起任何作用；")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("2、模板编译")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("1）什么是模板编译？")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在日常开发中，我们把写在 "),n("code",[e._v("<template></template>")]),e._v(" 标签中的类似于原生 "),n("code",[e._v("HTML")]),e._v(" 的内容称之为模板。这时你可能会问了，为什么说是“类似于原生 "),n("code",[e._v("HTML")]),e._v(" 的内容”而不是“就是 "),n("code",[e._v("HTML")]),e._v(" 的内容”？因为我们在开发中，在 "),n("code",[e._v("<template></template>")]),e._v(" 标签中除了写一些原生 "),n("code",[e._v("HTML")]),e._v(" 的标签，我们还会写一些变量插值，如，或者写一些 "),n("code",[e._v("Vue")]),e._v(" 指令，如 "),n("code",[e._v("v-on")]),e._v(" 、 "),n("code",[e._v("v-if")]),e._v(" 等。而这些东西都是在原生 "),n("code",[e._v("HTML")]),e._v(" 语法中不存在的，不被接受的。我们把用户在 "),n("code",[e._v("<template></template>")]),e._v(" 标签中写的类似于原生 "),n("code",[e._v("HTML")]),e._v(" 的内容进行编译，把原生 "),n("code",[e._v("HTML")]),e._v(" 的内容找出来，再把非原生 "),n("code",[e._v("HTML")]),e._v(" 找出来，经过一系列的逻辑处理生成渲染函数，也就是 "),n("code",[e._v("render")]),e._v(" 函数的这一段过程称之为模板编译过程。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("2）模板编译内部流程")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("那么模板编译内部是怎么把用户写的模板经过处理最终生成 "),n("code",[e._v("render")]),e._v(" 函数的呢？这内部的过程是怎样的呢？")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("2.1）抽象语法树（AST）")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t我们知道，用户在 "),n("code",[e._v("<template></template>")]),e._v(" 标签中写的模板对 "),n("code",[e._v("Vue")]),e._v(" 来说就是一堆字符串，那么如何解析这一堆字符串并且从中提取出元素的标签、属性、变量插值等有效信息呢？这就需要借助一个叫做抽象语法树的东西。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/2.5596631a.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t从图中我们可以看到，一个简单的 "),n("code",[e._v("HTML")]),e._v(" 标签的代码被转换成了一个 "),n("code",[e._v("JS")]),e._v(" 对象，而这个对象中的属性代表了这个标签中一些关键有效信息。如图中标识。 有兴趣的同学可以在这个网站在线转换试试：https://astexplorer.net/")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("2.2）具体流程")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t将一堆字符串模板解析成抽象语法树 "),n("code",[e._v("AST")]),e._v(" 后，我们就可以对其进行各种操作处理了，处理完后用处理后的 "),n("code",[e._v("AST")]),e._v(" 来生成 "),n("code",[e._v("render")]),e._v(" 函数。其具体流程可大致分为三个阶段：")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",[n("li",[e._v("模板解析阶段：将一堆模板字符串用正则等方式解析成抽象语法树"),n("code",[e._v("AST")]),e._v("；")]),n("li",[e._v("优化阶段：遍历"),n("code",[e._v("AST")]),e._v("，找出其中的静态节点，并打上标记；")]),n("li",[e._v("代码生成阶段：将"),n("code",[e._v("AST")]),e._v("转换成渲染函数；")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",[n("li",[e._v("模板解析阶段——解析器——源码路径："),n("code",[e._v("src/compiler/parser/index.js")]),e._v(";")]),n("li",[e._v("优化阶段——优化器——源码路径："),n("code",[e._v("src/compiler/optimizer.js")]),e._v(";")]),n("li",[e._v("代码生成阶段——代码生成器——源码路径："),n("code",[e._v("src/compiler/codegen/index.js")]),e._v(";")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/3.15d9566b.png",alt:"img"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("2.3）模板解析阶段（解析器）")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t解析器，顾名思义，就是把用户所写的模板根据一定的解析规则解析出有效的信息，最后用这些信息形成 "),n("code",[e._v("AST")]),e._v(" 。我们知道在 "),n("code",[e._v("<template></template>")]),e._v(" 模板内，除了有常规的 "),n("code",[e._v("HTML")]),e._v(" 标签外，用户还会一些文本信息以及在文本信息中包含过滤器。而这些不同的内容在解析起来肯定需要不同的解析规则，所以解析器不可能只有一个，它应该除了有解析常规 "),n("code",[e._v("HTML")]),e._v(" 的"),n("strong",[e._v("HTML解析器")]),e._v("，还应该有解析文本的"),n("strong",[e._v("文本解析器")]),e._v("以及解析文本中如果包含过滤器的"),n("strong",[e._v("过滤器解析器")]),e._v("。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/4.16462ada.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在源码中， "),n("code",[e._v("HTML")]),e._v(" 解析器就是 "),n("code",[e._v("parseHTML")]),e._v(" 函数，在模板解析主线函数 "),n("code",[e._v("parse")]),e._v(" 中调用了该函数，并传入两个参数，代码如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 代码位置：/src/complier/parser/index.js\n\n/**\n * Convert HTML string to AST.\n * 将HTML模板字符串转化为AST\n */\nexport function parse(template, options) {\n    // ...\n    parseHTML(template, {\n        warn,\n        expectHTML: options.expectHTML,\n        isUnaryTag: options.isUnaryTag,\n        canBeLeftOpenTag: options.canBeLeftOpenTag,\n        shouldDecodeNewlines: options.shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n        shouldKeepComment: options.comments,\n        // 当解析到开始标签时，调用该函数\n        start(tag, attrs, unary) {\n\n        },\n        // 当解析到结束标签时，调用该函数\n        end() {\n\n        },\n        // 当解析到文本时，调用该函数\n        chars(text) {\n\n        },\n        // 当解析到注释时，调用该函数\n        comment(text) {\n\n        }\n    })\n    return root\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("从代码中我们可以看到，调用 "),n("code",[e._v("parseHTML")]),e._v(" 函数时为其传入的两个参数分别是：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("ul",[e("li",[this._v("template: 待转换的模板字符串；")]),e("li",[this._v("options: 转换时所需的选项；")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("第一个参数是待转换的模板字符串，无需多言；重点看第二个参数，第二个参数提供了一些解析 "),n("code",[e._v("HTML")]),e._v(" 模板时的一些参数，同时还定义了4个钩子函数。这4个钩子函数有什么作用呢？我们说了模板编译阶段主线函数 "),n("code",[e._v("parse")]),e._v(" 会将 "),n("code",[e._v("HTML")]),e._v(" 模板字符串转化成 "),n("code",[e._v("AST")]),e._v(" ，而 "),n("code",[e._v("parseHTML")]),e._v(" 是用来解析模板字符串的，把模板字符串中不同的内容出来之后，那么谁来把提取出来的内容生成对应的 "),n("code",[e._v("AST")]),e._v(" 呢？答案就是这4个钩子函数。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("把这4个钩子函数作为参数传给解析器 "),n("code",[e._v("parseHTML")]),e._v(" ，当解析器解析出不同的内容时调用不同的钩子函数从而生成不同的 "),n("code",[e._v("AST")]),e._v(" 。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("当解析到开始标签时调用 "),n("code",[e._v("start")]),e._v(" 函数生成元素类型的 "),n("code",[e._v("AST")]),e._v(" 节点，代码如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 当解析到标签的开始位置时，触发start\nstart(tag, attrs, unary) {\n    let element = createASTElement(tag, attrs, currentParent)\n}\n\nexport function createASTElement(tag, attrs, parent) {\n    return {\n        type: 1,\n        tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent,\n        children: []\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("从上面代码中我们可以看到，"),n("code",[e._v("start")]),e._v("函数接收三个参数，分别是标签名"),n("code",[e._v("tag")]),e._v("、标签属性"),n("code",[e._v("attrs")]),e._v("、标签是否自闭合"),n("code",[e._v("unary")]),e._v("。当调用该钩子函数时，内部会调用"),n("code",[e._v("createASTElement")]),e._v("函数来创建元素类型的"),n("code",[e._v("AST")]),e._v("节点")]),n("li",[e._v("当解析到结束标签时调用"),n("code",[e._v("end")]),e._v("函数；")]),n("li",[e._v("当解析到文本时调用"),n("code",[e._v("chars")]),e._v("函数生成文本类型的"),n("code",[e._v("AST")]),e._v("节点；")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 当解析到标签的文本时，触发chars\nchars(text) {\n    if (text是带变量的动态文本) {\n        let element = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text\n        }\n    } else {\n        let element = {\n            type: 3,\n            text\n        }\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("当解析到标签的文本时，触发"),n("code",[e._v("chars")]),e._v("钩子函数，在该钩子函数内部，首先会判断文本是不是一个带变量的动态文本，如“hello ”。如果是动态文本，则创建动态文本类型的"),n("code",[e._v("AST")]),e._v("节点；如果不是动态文本，则创建纯静态文本类型的"),n("code",[e._v("AST")]),e._v("节点。")]),n("li",[e._v("当解析到注释时调用"),n("code",[e._v("comment")]),e._v("函数生成注释类型的"),n("code",[e._v("AST")]),e._v("节点；")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 当解析到标签的注释时，触发comment\ncomment(text: string) {\n    let element = {\n        type: 3,\n        text,\n        isComment: true\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("当解析到标签的注释时，触发"),n("code",[e._v("comment")]),e._v("钩子函数，该钩子函数会创建一个注释类型的"),n("code",[e._v("AST")]),e._v("节点。")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("一边解析不同的内容一边调用对应的钩子函数生成对应的 "),n("code",[e._v("AST")]),e._v(" 节点，最终完成将整个模板字符串转化成 "),n("code",[e._v("AST")]),e._v(" , 这就是 "),n("code",[e._v("HTML")]),e._v(" 解析器所要做的工作。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("HTML解析器源码：")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("function parseHTML(html, options) {\n    var stack = [];\n    var expectHTML = options.expectHTML;\n    var isUnaryTag$$1 = options.isUnaryTag || no;\n    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n    var index = 0;\n    var last, lastTag;\n\n    // 开启一个 while 循环，循环结束的条件是 html 为空，即 html 被 parse 完毕\n    while (html) {\n        last = html;\n        // 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)\n        if (!lastTag || !isPlainTextElement(lastTag)) {\n            let textEnd = html.indexOf('<')\n            /**\n             * 如果html字符串是以'<'开头,则有以下几种可能\n             * 开始标签:<div>\n             * 结束标签:</div>\n             * 注释:\x3c!-- 我是注释 --\x3e\n             * 条件注释:\x3c!-- [if !IE] --\x3e \x3c!-- [endif] --\x3e\n             * DOCTYPE:<!DOCTYPE html>\n             * 需要一一去匹配尝试\n             */\n            if (textEnd === 0) {\n                // 解析是否是注释\n                if (comment.test(html)) {\n\n                }\n                // 解析是否是条件注释\n                if (conditionalComment.test(html)) {\n\n                }\n                // 解析是否是DOCTYPE\n                const doctypeMatch = html.match(doctype)\n                if (doctypeMatch) {\n\n                }\n                // 解析是否是结束标签\n                const endTagMatch = html.match(endTag)\n                if (endTagMatch) {\n\n                }\n                // 匹配是否是开始标签\n                const startTagMatch = parseStartTag()\n                if (startTagMatch) {\n\n                }\n            }\n            // 如果html字符串不是以'<'开头,则解析文本类型\n            let text, rest, next\n            if (textEnd >= 0) {\n\n            }\n            // 如果在html字符串中没有找到'<'，表示这一段html字符串都是纯文本\n            if (textEnd < 0) {\n                text = html\n                html = ''\n            }\n            // 把截取出来的text转化成textAST\n            if (options.chars && text) {\n                options.chars(text)\n            }\n        } else {\n            // 父元素为script、style、textarea时，其内部的内容全部当做纯文本处理\n        }\n\n        //将整个字符串作为文本对待\n        if (html === last) {\n            options.chars && options.chars(html);\n            if (!stack.length && options.warn) {\n                options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n            }\n            break\n        }\n    }\n\n    // Clean up any remaining tags\n    parseEndTag();\n    //parse 开始标签\n    function parseStartTag() {\n\n    }\n    //处理 parseStartTag 的结果\n    function handleStartTag(match) {\n\n    }\n    //parse 结束标签\n    function parseEndTag(tagName, start, end) {\n\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("定义的一些常量和变量")]),n("li",[e._v("while 循环")]),n("li",[e._v("解析过程中用到的辅助函数")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("const stack = [] // 维护AST节点层级的栈\nconst expectHTML = options.expectHTML\nconst isUnaryTag = options.isUnaryTag || no\nconst canBeLeftOpenTag = options.canBeLeftOpenTag || no //用来检测一个标签是否是可以省略闭合标签的非自闭合标签\nlet index = 0 //解析游标，标识当前从何处开始解析模板字符串\nlet last, // 存储剩余还未解析的模板字符串\n    lastTag // 存储着位于 stack 栈顶的元素\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("接着开启 "),n("code",[e._v("while")]),e._v(" 循环，循环的终止条件是 模板字符串 "),n("code",[e._v("html")]),e._v(" 为空，即模板字符串被全部编译完毕。在每次 "),n("code",[e._v("while")]),e._v(" 循环中， 先把 "),n("code",[e._v("html")]),e._v(" 的值赋给变量 "),n("code",[e._v("last")]),e._v(" ，如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("last = html\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("这样做的目的是，如果经过上述所有处理逻辑处理过后， "),n("code",[e._v("html")]),e._v(" 字符串没有任何变化，即表示 "),n("code",[e._v("html")]),e._v(" 字符串没有匹配上任何一条规则，那么就把 "),n("code",[e._v("html")]),e._v(" 字符串当作纯文本对待，创建文本类型的 "),n("code",[e._v("AST")]),e._v(" 节点并且如果抛出异常：模板字符串中标签格式有误。如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v('//将整个字符串作为文本对待\nif (html === last) {\n    options.chars && options.chars(html);\n    if (!stack.length && options.warn) {\n        options.warn(("Mal-formatted tag at end of template: \\"" + html + "\\""));\n    }\n    break\n}\n')])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("接着，我们继续看 "),n("code",[e._v("while")]),e._v(" 循环体内的代码：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("while (html) {\n    // 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n\n    } else {\n        // parse 的内容是在纯文本标签里 (script,style,textarea)\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("在循环体内，首先判断了待解析的 "),n("code",[e._v("html")]),e._v(" 字符串是否在纯文本标签里，如 "),n("code",[e._v("script")]),e._v(" , "),n("code",[e._v("style")]),e._v(" , "),n("code",[e._v("textarea")]),e._v(" ，因为在这三个标签里的内容肯定不会有 "),n("code",[e._v("HTML")]),e._v(" 标签，所以我们可直接当作文本处理，判断条件如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("!lastTag || !isPlainTextElement(lastTag)\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("前面我们说了， "),n("code",[e._v("lastTag")]),e._v(" 为栈顶元素， "),n("code",[e._v("!lastTag")]),e._v(" 即表示当前 "),n("code",[e._v("html")]),e._v(" 字符串没有父节点，而 "),n("code",[e._v("isPlainTextElement(lastTag)")]),e._v(" 是检测 "),n("code",[e._v("lastTag")]),e._v(" 是否为是那三个纯文本标签之一，是的话返回 "),n("code",[e._v("true")]),e._v(" ，不是返回 "),n("code",[e._v("fasle")]),e._v(" 。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("也就是说当前 "),n("code",[e._v("html")]),e._v(" 字符串要么没有父节点要么父节点不是纯文本标签，则接下来就可以依次解析那6种类型的内容了。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("如何保证AST节点层级关系？（需要了解的问题）")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t关于这个问题， "),n("code",[e._v("Vue")]),e._v(" 也注意到了。 "),n("code",[e._v("Vue")]),e._v(" 在 "),n("code",[e._v("HTML")]),e._v(" 解析器的开头定义了一个栈 "),n("code",[e._v("stack")]),e._v(" ，这个栈的作用就是用来维护 "),n("code",[e._v("AST")]),e._v(" 节点层级的，那么它是怎么维护的呢？通过前文我们知道， "),n("code",[e._v("HTML")]),e._v(" 解析器在从前向后解析模板字符串时，每当遇到开始标签时就会调用 "),n("code",[e._v("start")]),e._v(" 钩子函数，那么在 "),n("code",[e._v("start")]),e._v(" 钩子函数内部我们可以将解析得到的开始标签推入栈中，而每当遇到结束标签时就会调用 "),n("code",[e._v("end")]),e._v(" 钩子函数，那么我们也可以在 "),n("code",[e._v("end")]),e._v(" 钩子函数内部将解析得到的结束标签所对应的开始标签从栈中弹出。请看如下例子：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-html"},[this._v("<div>\n    <p><span></span></p>\n</div>\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t当解析到开始标签 "),n("code",[e._v("<div>")]),e._v(" 时，就把 "),n("code",[e._v("div")]),e._v(" 推入栈中，然后继续解析，当解析到 "),n("code",[e._v("<p>")]),e._v(" 时，再把 "),n("code",[e._v("p")]),e._v(" 推入栈中，同理，再把 "),n("code",[e._v("span")]),e._v(" 推入栈中，当解析到结束标签 "),n("code",[e._v("</span>")]),e._v(" 时，此时栈顶的标签刚好是 "),n("code",[e._v("span")]),e._v(" 的开始标签，那么就用 "),n("code",[e._v("span")]),e._v(" 的开始标签和结束标签构建 "),n("code",[e._v("AST")]),e._v(" 节点，并且从栈中把 "),n("code",[e._v("span")]),e._v(" 的开始标签弹出，那么此时栈中的栈顶标签 "),n("code",[e._v("p")]),e._v(" 就是构建好的 "),n("code",[e._v("span")]),e._v(" 的 "),n("code",[e._v("AST")]),e._v(" 节点的父节点，如下图：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/7.6ca1dbf0.png",alt:"img"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-html"},[this._v("<div>\n    <p><span></p>\n</div>\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t按照上面的流程解析这个模板字符串时，当解析到结束标签 "),n("code",[e._v("</p>")]),e._v(" 时，此时栈顶的标签应该是 "),n("code",[e._v("p")]),e._v(" 才对，而现在是 "),n("code",[e._v("span")]),e._v(" ，那么就说明 "),n("code",[e._v("span")]),e._v(" 标签没有被正确闭合，此时控制台就会抛出警告：‘tag has no matching end tag.’相信这个警告你一定不会陌生。这就是栈的第二个用途： 检测模板字符串中是否有未正确闭合的标签。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("2.4）优化阶段（优化器）")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在前面，我们介绍了模板编译流程三大阶段中的第一阶段模板解析阶段，在这一阶段主要做的工作是用解析器将用户所写的模板字符串解析成 "),n("code",[e._v("AST")]),e._v(" 抽象语法树，理论上来讲，有了 "),n("code",[e._v("AST")]),e._v(" 就可直接进入第三阶段生成 "),n("code",[e._v("render")]),e._v(" 函数了。其实不然， "),n("code",[e._v("Vue")]),e._v(" 还是很看重性能的，只要有一点可以优化的地方就要将其进行优化。在后面我们介绍虚拟 "),n("code",[e._v("DOM")]),e._v(" 的时候会讲到有一种节点一旦首次渲染上了之后不管状态再怎么变化它都不会变了，这种节点叫做"),n("strong",[e._v("静态节点")]),e._v("，如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-html"},[this._v("<ul>\n    <li>我是文本信息</li>\n    <li>我是文本信息</li>\n    <li>我是文本信息</li>\n    <li>我是文本信息</li>\n    <li>我是文本信息</li>\n</ul>\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在上面代码中， "),n("code",[e._v("ul")]),e._v(" 标签下面有5个 "),n("code",[e._v("li")]),e._v(" 标签，每个 "),n("code",[e._v("li")]),e._v(" 标签里的内容都是不含任何变量的纯文本，也就是说这种标签一旦第一次被渲染成 "),n("code",[e._v("DOM")]),e._v(" 节点以后，之后不管状态再怎么变化它都不会变了，我们把像 "),n("code",[e._v("li")]),e._v(" 的这种节点称之为静态节点。而这5个 "),n("code",[e._v("li")]),e._v(" 节点的父节点是 "),n("code",[e._v("ul")]),e._v(" 节点，也就是说 "),n("code",[e._v("ul")]),e._v(" 节点的所有子节点都是静态节点，那么我们把像 "),n("code",[e._v("ul")]),e._v(" 的这种节点称之为"),n("strong",[e._v("静态根节点")]),e._v("。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\tOK，有了"),n("strong",[e._v("静态节点")]),e._v("和"),n("strong",[e._v("静态根节点")]),e._v("这两个概念之后，我们再仔细思考，模板编译的最终目的是用模板生成一个 "),n("code",[e._v("render")]),e._v(" 函数，而用 "),n("code",[e._v("render")]),e._v(" 函数就可以生成与模板对应的 "),n("code",[e._v("VNode")]),e._v(" ，之后再进行 "),n("code",[e._v("patch")]),e._v(" 算法，最后完成视图渲染。这中间的 "),n("code",[e._v("patch")]),e._v(" 算法又是用来对比新旧 "),n("code",[e._v("VNode")]),e._v(" 之间存在的差异。在上面我们还说了，静态节点不管状态怎么变化它是不会变的，基于此，那我们就可以在 "),n("code",[e._v("patch")]),e._v(" 过程中不用去对比这些静态节点了，这样不就又可以提高一些性能了。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t所以我们在模板编译的时候就先找出模板中所有的静态节点和静态根节点，然后给它们打上标记，用于告诉后面 "),n("code",[e._v("patch")]),e._v(" 过程打了标记的这些节点是不需要对比的，你只要把它们克隆一份去用就好啦。这就是优化阶段存在的意义。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",[n("li",[n("strong",[e._v("在"),n("code",[e._v("AST")]),e._v("中找出所有静态节点并打上标记；")])]),n("li",[n("strong",[e._v("在"),n("code",[e._v("AST")]),e._v("中找出所有静态根节点并打上标记；")])])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("优化阶段的源码位于 "),n("code",[e._v("src/compiler/optimizer.js")]),e._v(" 中，如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("export function optimize(root: ? ASTElement, options : CompilerOptions) {\n    if (!root) return\n    isStaticKey = genStaticKeysCached(options.staticKeys || '')\n    isPlatformReservedTag = options.isReservedTag || no\n    // 标记静态节点\n    markStatic(root)\n    // 标记静态根节点\n    markStaticRoots(root, false)\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("function markStatic(node: ASTNode) {\n    node.static = isStatic(node)\n    if (node.type === 1) {\n        // do not make component slot content static. this avoids\n        // 1. components not able to mutate slot nodes\n        // 2. static slot content fails for hot-reloading\n        if (\n            !isPlatformReservedTag(node.tag) &&\n            node.tag !== 'slot' &&\n            node.attrsMap['inline-template'] == null\n        ) {\n            return\n        }\n        for (let i = 0, l = node.children.length; i < l; i++) {\n            const child = node.children[i]\n            markStatic(child)\n            if (!child.static) {\n                node.static = false\n            }\n        }\n        if (node.ifConditions) {\n            for (let i = 1, l = node.ifConditions.length; i < l; i++) {\n                const block = node.ifConditions[i].block\n                markStatic(block)\n                if (!block.static) {\n                    node.static = false\n                }\n            }\n        }\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("标记静态根节点：寻找静态根节点根寻找静态节点的逻辑类似，都是从 "),n("code",[e._v("AST")]),e._v(" 根节点递归向下遍历寻找。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("function markStaticRoots(node: ASTNode, isInFor: boolean) {\n    if (node.type === 1) {\n        if (node.static || node.once) {\n            node.staticInFor = isInFor\n        }\n        // For a node to qualify as a static root, it should have children that\n        // are not just static text. Otherwise the cost of hoisting out will\n        // outweigh the benefits and it's better off to just always render it fresh.\n        if (node.static && node.children.length && !(\n                node.children.length === 1 &&\n                node.children[0].type === 3\n            )) {\n            node.staticRoot = true\n            return\n        } else {\n            node.staticRoot = false\n        }\n        if (node.children) {\n            for (let i = 0, l = node.children.length; i < l; i++) {\n                markStaticRoots(node.children[i], isInFor || !!node.for)\n            }\n        }\n        if (node.ifConditions) {\n            for (let i = 1, l = node.ifConditions.length; i < l; i++) {\n                markStaticRoots(node.ifConditions[i].block, isInFor)\n            }\n        }\n    }\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("3、代码生成阶段（2.5、代码生成器）（生成render渲染函数）")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t经过之前的讲解，我们把用户所写的模板字符串先经过解析阶段解析生成对应的抽象语法树 "),n("code",[e._v("AST")]),e._v(" ，接着再经过优化阶段将 "),n("code",[e._v("AST")]),e._v(" 中的静态节点及静态根节点都打上标记，现在终于到了模板编译三大阶段的最后一个阶段了——代码生成阶段。所谓代码生成阶段，到底是要生成什么代码？答：要生成 "),n("code",[e._v("render")]),e._v(" 函数字符串。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t我们知道， "),n("code",[e._v("Vue")]),e._v(" 实例在挂载的时候会调用其自身的 "),n("code",[e._v("render")]),e._v(" 函数来生成实例上的 "),n("code",[e._v("template")]),e._v(" 选项所对应的 "),n("code",[e._v("VNode")]),e._v(" ，简单的来说就是 "),n("code",[e._v("Vue")]),e._v(" 只要调用了 "),n("code",[e._v("render")]),e._v(" 函数，就可以把模板转换成对应的虚拟 "),n("code",[e._v("DOM")]),e._v(" 。那么 "),n("code",[e._v("Vue")]),e._v(" 要想调用 "),n("code",[e._v("render")]),e._v(" 函数，那必须要先有这个 "),n("code",[e._v("render")]),e._v(" 函数，那这个 "),n("code",[e._v("render")]),e._v(" 函数又是从哪来的呢？是用户手写的还是 "),n("code",[e._v("Vue")]),e._v(" 自己生成的？答案是都有可能。我们知道，我们在日常开发中是可以在 "),n("code",[e._v("Vue")]),e._v(" 组件选项中手写一个 "),n("code",[e._v("render")]),e._v(" 选项，其值对应一个函数，那这个函数就是 "),n("code",[e._v("render")]),e._v(" 函数，当用户手写了 "),n("code",[e._v("render")]),e._v(" 函数时，那么 "),n("code",[e._v("Vue")]),e._v(" 在挂载该组件的时候就会调用用户手写的这个 "),n("code",[e._v("render")]),e._v(" 函数。那如果用户没有写呢？那这个时候 "),n("code",[e._v("Vue")]),e._v(" 就要自己根据模板内容生成一个 "),n("code",[e._v("render")]),e._v(" 函数供组件挂载的时候调用。而 "),n("code",[e._v("Vue")]),e._v(" 自己根据模板内容生成 "),n("code",[e._v("render")]),e._v(" 函数的过程就是本篇文章所要介绍的代码生成阶段。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t"),n("strong",[e._v("所谓代码生成其实就是根据模板对应的抽象语法树 "),n("code",[e._v("AST")]),e._v(" 生成一个函数，通过调用这个函数就可以得到模板对应的虚拟 "),n("code",[e._v("DOM")]),e._v(" 。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("如何根据AST生成render函数？")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("该模板经过解析并优化后对应的 "),n("code",[e._v("AST")]),e._v(" 如下：")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t生成 "),n("code",[e._v("render")]),e._v(" 函数的过程其实就是一个递归的过程，从顶向下依次递归 "),n("code",[e._v("AST")]),e._v(" 中的每一个节点，根据不同的 "),n("code",[e._v("AST")]),e._v(" 节点类型创建不同的 "),n("code",[e._v("VNode")]),e._v(" 类型。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t首先，根节点 "),n("code",[e._v("div")]),e._v(" 是一个元素型 "),n("code",[e._v("AST")]),e._v(" 节点，那么我们就要创建一个元素型 "),n("code",[e._v("VNode")]),e._v(" ，我们把创建元素型 "),n("code",[e._v("VNode")]),e._v(" 的方法叫做 "),n("code",[e._v("_c(tagName, data, children)")]),e._v(" 。我们暂且不管 "),n("code",[e._v("_c()")]),e._v(" 是什么，只需知道调用 "),n("code",[e._v("_c()")]),e._v(" 就可以创建一个元素型 "),n("code",[e._v("VNode")]),e._v(" 。那么就可以生成如下代码：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v('_c(\'div\', {\n    attrs: {\n        "id": "NLRX"\n    }\n}, [ /*子节点列表*/ ])\n')])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t根节点 "),n("code",[e._v("div")]),e._v(" 有子节点，那么我们进入子节点列表 "),n("code",[e._v("children")]),e._v(" 里遍历子节点，发现子节点 "),n("code",[e._v("p")]),e._v(" 也是元素型的，那就继续创建元素型 "),n("code",[e._v("VNode")]),e._v(" 并将其放入上述代码中根节点的子节点列表中，如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("_c('div', {\n    attrs: {\n        \"id\": \"NLRX\"\n    }\n}, [_c('p'), [ /*子节点列表*/ ]])\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t同理，继续遍历 "),n("code",[e._v("p")]),e._v(" 节点的子节点，发现是一个文本型节点，那就创建一个文本型 "),n("code",[e._v("VNode")]),e._v(" 并将其插入到 "),n("code",[e._v("p")]),e._v(" 节点的子节点列表中，同理，创建文本型 "),n("code",[e._v("VNode")]),e._v(" 我们调用 "),n("code",[e._v("_v()")]),e._v(" 方法，如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v('_c(\'div\', {\n    attrs: {\n        "id": "NLRX"\n    }\n}, [_c(\'p\'), [_v("Hello " + _s(name))]])\n')])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t到此，整个 "),n("code",[e._v("AST")]),e._v(" 就遍历完毕了，我们将得到的代码再包装一下，如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v('`\nwith(this){\n    reurn _c(\n        \'div\',\n        {\n            attrs:{"id":"NLRX"},\n        }\n        [\n            _c(\'p\'),\n            [\n                _v("Hello "+_s(name))\n            ]\n        ])\n}\n`\n')])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t我们看上面示例生成的JavaScript字符串，会发现里面会有 "),n("code",[e._v("_v")]),e._v(" 、 "),n("code",[e._v("_c")]),e._v(" 、 "),n("code",[e._v("_s")]),e._v(" 这样的东西，这些其实就是Vue内部定义的一些调用方法。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("其中 "),n("code",[e._v("_c")]),e._v(" 函数定义在 "),n("code",[e._v("src/core/instance/render.js")]),e._v(" 中。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-vuejs"},[this._v("  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n  vm.$scopedSlots = emptyObject\n  // 定义的_c函数是用来创建元素的\n  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n\n  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("而其他 "),n("code",[e._v("_s")]),e._v(" 、 "),n("code",[e._v("_v")]),e._v(" 是定义在 "),n("code",[e._v("src/core/instance/render-helpers/index.js")]),e._v(" 中：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-vuejs"},[this._v("export function installRenderHelpers (target: any) {\n  target._o = markOnce\n  target._n = toNumber\n  target._s = toString\n  target._l = renderList //生成列表VNode\n  target._t = renderSlot //生成解析slot节点\n  target._q = looseEqual\n  target._i = looseIndexOf\n  target._m = renderStatic //生成静态元素\n  target._f = resolveFilter\n  target._k = checkKeyCodes\n  target._b = bindObjectProps //绑定对象属性\n  target._v = createTextVNode //创建文本VNode\n  target._e = createEmptyVNode //创建空节点VNode\n  target._u = resolveScopedSlots\n  target._g = bindObjectListeners\n  target._d = bindDynamicKeys\n  target._p = prependModifier\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t以上都是会在生成的JavaScript字符串中用到的，像比较常用的 "),n("code",[e._v("_c")]),e._v(" 执行 "),n("code",[e._v("createElement")]),e._v(" 去创建 "),n("code",[e._v("VNode")]),e._v(" ， "),n("code",[e._v("_l")]),e._v(" 对应 "),n("code",[e._v("renderList")]),e._v(" 渲染列表； "),n("code",[e._v("_v")]),e._v(" 对应 "),n("code",[e._v("createTextVNode")]),e._v(" 创建文本 "),n("code",[e._v("VNode")]),e._v(" ； "),n("code",[e._v("_e")]),e._v(" 对应 "),n("code",[e._v("createEmptyVNode")]),e._v(" 创建空的 "),n("code",[e._v("VNode")]),e._v(" 。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t最后，我们将上面得到的这个函数字符串传递给 "),n("code",[e._v("createFunction")]),e._v(" 函数， "),n("code",[e._v("createFunction")]),e._v(" 函数会帮我们把得到的函数字符串转换成真正的函数，赋给组件中的 "),n("code",[e._v("render")]),e._v(" 选项，从而就是 "),n("code",[e._v("render")]),e._v(" 函数了。如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("res.render = createFunction(compiled.render, fnGenErrors)\n\nfunction createFunction(code, errors) {\n    try {\n        return new Function(code)\n    } catch (err) {\n        errors.push({\n            err,\n            code\n        })\n        return noop\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t以上就是根据一个简单的模板所对应的 "),n("code",[e._v("AST")]),e._v(" 生成 "),n("code",[e._v("render")]),e._v(" 函数的过程，理论过程我们已经了解了，那么在源码中实际是如何实现的呢？下面我们就回归源码分析其具体实现过程。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t代码生成阶段的源码位于 "),n("code",[e._v("src/compiler/codegen/index.js")]),e._v(" 中，源码虽然很长，但是逻辑不复杂，核心逻辑如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("export function generate(ast, option) {\n    const state = new CodegenState(options) // 传入ast和options进行生成\n    const code = ast ? genElement(ast, state) : '_c(\"div\")' //重点\n    return {\n        render: `with(this){return ${code}}`, // 最外层包一个 with(this) 之后返回\n        staticRenderFns: state.staticRenderFns\n        // 这个数组中的函数与 VDOM 中的 diff 算法优化相关\n        // 那些被标记为 staticRoot 节点的 VNode 就会单独生成 staticRenderFns\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t生成器入口函数就比较简单，先初始化一些配置options，然后调用 "),n("code",[e._v("generate")]),e._v(" 函数并传入优化后得到的 "),n("code",[e._v("ast")]),e._v(" ，在 "),n("code",[e._v("generate")]),e._v(" 函数内部先判断 "),n("code",[e._v("ast")]),e._v(" 是否为空，不为空则调用 "),n("code",[e._v("genElement(ast, state)")]),e._v(" 函数创建 "),n("code",[e._v("VNode")]),e._v(" ，为空则创建一个空的元素型 "),n("code",[e._v("div")]),e._v(" 的 "),n("code",[e._v("VNode")]),e._v(" 。然后将得到的结果用 "),n("code",[e._v("with(this){return ${code}}")]),e._v(" 包裹返回。可以看出，真正起作用的是 "),n("code",[e._v("genElement")]),e._v(" 函数，下面我们继续来看一下 "),n("code",[e._v("genElement")]),e._v(" 函数内部是怎样的。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("code",[this._v("genElement")]),this._v(" 函数定义如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("export function genElement(el: ASTElement, state: CodegenState): string {\n    if (el.staticRoot && !el.staticProcessed) {\n        return genStatic(el, state)\n    } else if (el.once && !el.onceProcessed) {\n        return genOnce(el, state)\n    } else if (el.for && !el.forProcessed) {\n        return genFor(el, state)\n    } else if (el.if && !el.ifProcessed) {\n        return genIf(el, state)\n    } else if (el.tag === 'template' && !el.slotTarget) {\n        return genChildren(el, state) || 'void 0'\n    } else if (el.tag === 'slot') {\n        return genSlot(el, state)\n    } else {\n        // component or element\n        let code\n        if (el.component) {\n            code = genComponent(el.component, el, state)\n        } else {\n            const data = el.plain ? undefined : genData(el, state)\n\n            const children = el.inlineTemplate ? null : genChildren(el, state, true)\n            code = `_c('${el.tag}'${\n        data ? `,${data}` : '' // data\n      }${\n        children ? `,${children}` : '' // children\n      })`\n        }\n        // module transforms\n        for (let i = 0; i < state.transforms.length; i++) {\n            code = state.transforms[i](el, code)\n        }\n        return code\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t你会发现genElement函数里面有很多条件判断。这是因为Vue里面的指令写法实在太多，像 "),n("code",[e._v("v-if")]),e._v(" 、 "),n("code",[e._v("v-for")]),e._v(" 、 "),n("code",[e._v("v-slot")]),e._v(" 等，每种指令写法都分离出一个函数来单独处理，就是根据当前 "),n("code",[e._v("AST")]),e._v(" 元素节点属性的不同从而执行不同的代码生成函数。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t虽然元素节点属性的情况有很多种，但是最后真正创建出来的 "),n("code",[e._v("VNode")]),e._v(" 无非就三种，分别是"),n("strong",[e._v("元素节点")]),e._v("，"),n("strong",[e._v("文本节点")]),e._v("，"),n("strong",[e._v("注释节点")]),e._v("。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("4、Vnode")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("4.1什么是虚拟DOM？")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("所谓虚拟DOM，就是用一个 "),n("code",[e._v("JS")]),e._v(" 对象来描述一个 "),n("code",[e._v("DOM")]),e._v(" 节点，像如下示例：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("< div class = \"a\"\nid = \"b\" > 我是内容 < /div>\n\n{\n    tag: 'div', // 元素标签\n    attrs: { // 属性\n        class: 'a',\n        id: 'b'\n    },\n    text: '我是内容', // 文本内容\n    children: [] // 子元素\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("4.2为什么要有虚拟DOM？")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t "),n("code",[e._v("Vue")]),e._v(" 是数据驱动视图的，数据发生变化视图就要随之更新，在更新视图的时候难免要操作 "),n("code",[e._v("DOM")]),e._v(" , 而操作真实 "),n("code",[e._v("DOM")]),e._v(" 又是非常耗费性能的，既然我们逃不掉操作 "),n("code",[e._v("DOM")]),e._v(" , 但是我们可以尽可能少的操作 "),n("code",[e._v("DOM")]),e._v(" 。最直观的思路就是我们不要盲目的去更新视图，而是通过对比数据变化前后的状态，计算出视图中哪些地方需要更新，只更新需要更新的地方，而不需要更新的地方则不需关心，这样我们就可以尽可能少的操作 "),n("code",[e._v("DOM")]),e._v(" 了。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("也就是用 "),n("code",[e._v("JS")]),e._v(" 的计算性能来换取操作 "),n("code",[e._v("DOM")]),e._v(" 的性能。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("避免直接操作真实"),n("code",[e._v("DOM")]),e._v("，提高开发效率")]),n("li",[e._v("作为一个中间层可以跨平台，支持"),n("code",[e._v("web")]),e._v("端渲染，还可以支持服务端渲染")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("4.3Vue中的虚拟DOM")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t我们说了，虚拟 "),n("code",[e._v("DOM")]),e._v(" 就是用 "),n("code",[e._v("JS")]),e._v(" 来描述一个真实的 "),n("code",[e._v("DOM")]),e._v(" 节点。而在 "),n("code",[e._v("Vue")]),e._v(" 中就存在了一个 "),n("code",[e._v("VNode")]),e._v(" 类，通过这个类，我们就可以实例化出不同类型的虚拟 "),n("code",[e._v("DOM")]),e._v(" 节点，源码如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 源码位置：src/core/vdom/vnode.js\n\nexport default class VNode {\n    constructor(\n        tag ? : string,\n        data ? : VNodeData,\n        children ? : ? Array < VNode > ,\n        text ? : string,\n        elm ? : Node,\n        context ? : Component,\n        componentOptions ? : VNodeComponentOptions,\n        asyncFactory ? : Function\n    ) {\n        this.tag = tag /*当前节点的标签名*/\n        this.data = data /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        this.children = children /*当前节点的子节点，是一个数组*/\n        this.text = text /*当前节点的文本*/\n        this.elm = elm /*当前虚拟节点对应的真实dom节点*/\n        this.ns = undefined /*当前节点的名字空间*/\n        this.context = context /*当前组件节点对应的Vue实例*/\n        this.fnContext = undefined /*函数式组件对应的Vue实例*/\n        this.fnOptions = undefined\n        this.fnScopeId = undefined\n        this.key = data && data.key /*节点的key属性，被当作节点的标志，用以优化*/\n        this.componentOptions = componentOptions /*组件的option选项*/\n        this.componentInstance = undefined /*当前节点对应的组件的实例*/\n        this.parent = undefined /*当前节点的父节点*/\n        this.raw = false /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/\n        this.isStatic = false /*静态节点标志*/\n        this.isRootInsert = true /*是否作为跟节点插入*/\n        this.isComment = false /*是否为注释节点*/\n        this.isCloned = false /*是否为克隆节点*/\n        this.isOnce = false /*是否有v-once指令*/\n        this.asyncFactory = asyncFactory\n        this.asyncMeta = undefined\n        this.isAsyncPlaceholder = false\n    }\n\n    get child(): Component | void {\n        return this.componentInstance\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t从上面的代码中可以看出： "),n("code",[e._v("VNode")]),e._v(" 类中包含了描述一个真实 "),n("code",[e._v("DOM")]),e._v(" 节点所需要的一系列属性，如 "),n("code",[e._v("tag")]),e._v(" 表示节点的标签名， "),n("code",[e._v("text")]),e._v(" 表示节点中包含的文本， "),n("code",[e._v("children")]),e._v(" 表示该节点包含的子节点等。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("注释节点")]),n("li",[e._v("文本节点")]),n("li",[e._v("元素节点")]),n("li",[e._v("组件节点")]),n("li",[e._v("函数式组件节点")]),n("li",[e._v("克隆节点")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("4.4Vnode的作用")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t "),n("code",[e._v("VNode")]),e._v(" 的作用是相当大的。我们在视图渲染之前，把写好的 "),n("code",[e._v("template")]),e._v(" 模板先编译成 "),n("code",[e._v("VNode")]),e._v(" 并缓存下来，等到数据发生变化页面需要重新渲染的时候，我们把数据发生变化后生成的 "),n("code",[e._v("VNode")]),e._v(" 与前一次缓存下来的 "),n("code",[e._v("VNode")]),e._v(" 进行对比，找出差异，然后有差异的 "),n("code",[e._v("VNode")]),e._v(" 对应的真实 "),n("code",[e._v("DOM")]),e._v(" 节点就是需要重新渲染的节点，最后根据有差异的 "),n("code",[e._v("VNode")]),e._v(" 创建出真实的 "),n("code",[e._v("DOM")]),e._v(" 节点再插入到视图中，最终完成一次视图更新。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t有了数据变化前后的 "),n("code",[e._v("VNode")]),e._v(" ，我们才能进行后续的 "),n("code",[e._v("DOM-Diff")]),e._v(" 找出差异，最终做到只更新有差异的视图，从而达到尽可能少的操作真实 "),n("code",[e._v("DOM")]),e._v(" 的目的，以节省性能。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("4.5Vnode的创建过程")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[this._v("1）"),e("strong",[this._v("Vnode的创建是在updateComponent函数中")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[n("p",[e._v("通过"),n("code",[e._v("vm._render()")]),e._v("生成虚拟"),n("code",[e._v("dom")]),e._v("，并通过"),n("code",[e._v("vm._update")]),e._v("函数将虚拟"),n("code",[e._v("dom")]),e._v("转为真实"),n("code",[e._v("dom")]),e._v("渲染至页面中；（"),n("code",[e._v("updateComponent")]),e._v("函数是在创建"),n("code",[e._v("watcher")]),e._v("实例时完成调用的；）")]),n("p",[e._v("// src\\core\\instance\\lifecycle.js")]),n("pre",[n("code",[e._v("  updateComponent = () => {\n    // vm._render() 生成虚拟DOM\n    // vm._update用来将虚拟DOM转换为真实DOM，再渲染到页面中\n    vm._update(vm._render(), hydrating)\n  }\n")])])])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("Vue.prototype._render = function(): VNode {\n    const vm: Component = this\n    const {\n        render,\n        _parentVnode\n    } = vm.$options\n\n    if (_parentVnode) {\n        vm.$scopedSlots = normalizeScopedSlots(\n            _parentVnode.data.scopedSlots,\n            vm.$slots,\n            vm.$scopedSlots\n        )\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode\n    // render self\n    let vnode\n    try {\n        // There's no need to maintain a stack becaues all render fns are called\n        // separately from one another. Nested component's render fns are called\n        // when parent component is patched.\n        currentRenderingInstance = vm\n        vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n        handleError(e, vm, `render`)\n        // return error render result,\n        // or previous vnode to prevent render error causing blank component\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n            try {\n                vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n            } catch (e) {\n                handleError(e, vm, `renderError`)\n                vnode = vm._vnode\n            }\n        } else {\n            vnode = vm._vnode\n        }\n    } finally {\n        currentRenderingInstance = null\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n        vnode = vnode[0]\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n        if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n            warn(\n                'Multiple root nodes returned from render function. Render function ' +\n                'should return a single root node.',\n                vm\n            )\n        }\n        vnode = createEmptyVNode()\n    }\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("createElement 做了什么事情？")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("3）$createElement")]),this._v("（(src\\core\\instance\\render.js)）")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("在调用"),n("code",[e._v("render")]),e._v("函数时，会传递一个"),n("code",[e._v("h")]),e._v("参数，这个"),n("code",[e._v("h")]),e._v("参数就是"),n("code",[e._v("$createElement")]),e._v("，而"),n("code",[e._v("$createElement")]),e._v("最终调用的是"),n("code",[e._v("createElement")]),e._v("方法，源码如下")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("  export function createElement(\n      context: Component,\n      tag: any,\n      data: any,\n      children: any,\n      normalizationType: any,\n      alwaysNormalize: boolean\n  ): VNode | Array < VNode > {\n      if (Array.isArray(data) || isPrimitive(data)) {\n          normalizationType = children\n          children = data\n          data = undefined\n      }\n      if (isTrue(alwaysNormalize)) {\n          normalizationType = ALWAYS_NORMALIZE\n      }\n      return _createElement(context, tag, data, children, normalizationType)\n  }\n\n  export function _createElement(\n      context: Component,\n      tag ? : string | Class < Component > | Function | Object,\n      data ? : VNodeData,\n      children ? : any,\n      normalizationType ? : number\n  ): VNode | Array < VNode > {\n      if (isDef(data) && isDef((data: any).__ob__)) {\n          process.env.NODE_ENV !== 'production' && warn(\n              `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` +\n              'Always create fresh vnode data objects in each render!',\n              context\n          )\n          return createEmptyVNode()\n      }\n      // object syntax in v-bind\n      if (isDef(data) && isDef(data.is)) {\n          tag = data.is\n      }\n      if (!tag) {\n          // in case of component :is set to falsy value\n          return createEmptyVNode()\n      }\n      // warn against non-primitive key\n      if (process.env.NODE_ENV !== 'production' &&\n          isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n      ) {\n          if (!__WEEX__ || !('@binding' in data.key)) {\n              warn(\n                  'Avoid using non-primitive value as key, ' +\n                  'use string/number value instead.',\n                  context\n              )\n          }\n      }\n      // support single function children as default scoped slot\n      if (Array.isArray(children) &&\n          typeof children[0] === 'function'\n      ) {\n          data = data || {}\n          data.scopedSlots = {\n              default: children[0]\n          }\n          children.length = 0\n      }\n      if (normalizationType === ALWAYS_NORMALIZE) {\n          children = normalizeChildren(children)\n      } else if (normalizationType === SIMPLE_NORMALIZE) {\n          children = simpleNormalizeChildren(children)\n      }\n      let vnode, ns\n      if (typeof tag === 'string') {\n          let Ctor\n          ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag)\n          if (config.isReservedTag(tag)) {\n              // platform built-in elements\n              vnode = new VNode(\n                  config.parsePlatformTagName(tag), data, children,\n                  undefined, undefined, context\n              )\n          } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n              // component\n              vnode = createComponent(Ctor, data, context, children, tag)\n          } else {\n              // unknown or unlisted namespaced elements\n              // check at runtime because it may get assigned a namespace when its\n              // parent normalizes children\n              vnode = new VNode(\n                  tag, data, children,\n                  undefined, undefined, context\n              )\n          }\n      } else {\n          // direct component options / constructor\n          vnode = createComponent(tag, data, context, children)\n      }\n      if (Array.isArray(vnode)) {\n          return vnode\n      } else if (isDef(vnode)) {\n          if (isDef(ns)) applyNS(vnode, ns)\n          if (isDef(data)) registerDeepBindings(data)\n          return vnode\n      } else {\n          return createEmptyVNode()\n      }\n  }\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("5、patch（diff算法）（6、更新视图）")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在 "),n("code",[e._v("Vue")]),e._v(" 中，把 "),n("code",[e._v("DOM-Diff")]),e._v(" 过程叫做 "),n("code",[e._v("patch")]),e._v(" 过程。patch, 意为“补丁”，即指对旧的 "),n("code",[e._v("VNode")]),e._v(" 修补，打补丁从而得到新的 "),n("code",[e._v("VNode")]),e._v(" ，其本质都是把对比新旧两份 "),n("code",[e._v("VNode")]),e._v(" 的过程。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t当数据发生改变时，set方法会让调用 "),n("code",[e._v("Dep.notify")]),e._v(" 通知所有订阅者Watcher，订阅者就会调用 "),n("code",[e._v("patch")]),e._v(" 给真实的DOM打补丁，更新相应的视图。流程图如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/998023/201805/998023-20180519212357826-1474719173.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t我们在下面研究 "),n("code",[e._v("patch")]),e._v(" 过程的时候，一定把握住这样一个思想：所谓旧的 "),n("code",[e._v("VNode")]),e._v(" (即 "),n("code",[e._v("oldVNode")]),e._v(" )就是数据变化之前视图所对应的虚拟 "),n("code",[e._v("DOM")]),e._v(" 节点，而新的 "),n("code",[e._v("VNode")]),e._v(" 是数据变化之后将要渲染的新的视图所对应的虚拟 "),n("code",[e._v("DOM")]),e._v(" 节点，所以我们要以生成的新的 "),n("code",[e._v("VNode")]),e._v(" 为基准，对比旧的 "),n("code",[e._v("oldVNode")]),e._v(" ，如果新的 "),n("code",[e._v("VNode")]),e._v(" 上有的节点而旧的 "),n("code",[e._v("oldVNode")]),e._v(" 上没有，那么就在旧的 "),n("code",[e._v("oldVNode")]),e._v(" 上加上去；如果新的 "),n("code",[e._v("VNode")]),e._v(" 上没有的节点而旧的 "),n("code",[e._v("oldVNode")]),e._v(" 上有，那么就在旧的 "),n("code",[e._v("oldVNode")]),e._v(" 上去掉；如果某些节点在新的 "),n("code",[e._v("VNode")]),e._v(" 和旧的 "),n("code",[e._v("oldVNode")]),e._v(" 上都有，那么就以新的 "),n("code",[e._v("VNode")]),e._v(" 为准，更新旧的 "),n("code",[e._v("oldVNode")]),e._v(" ，从而让新旧 "),n("code",[e._v("VNode")]),e._v(" 相同。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t总之一句话："),n("strong",[e._v("以新的VNode为基准，改造旧的oldVNode使之成为跟新的VNode一样，这就是patch过程要干的事")]),e._v("。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("说了这么多，听起来感觉好像很复杂的样子，其实不然，我们仔细想想，整个 "),n("code",[e._v("patch")]),e._v(" 无非就是干三件事：")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("创建节点：新的"),n("code",[e._v("VNode")]),e._v("中有而旧的"),n("code",[e._v("oldVNode")]),e._v("中没有，就在旧的"),n("code",[e._v("oldVNode")]),e._v("中创建。")]),n("li",[e._v("删除节点：新的"),n("code",[e._v("VNode")]),e._v("中没有而旧的"),n("code",[e._v("oldVNode")]),e._v("中有，就从旧的"),n("code",[e._v("oldVNode")]),e._v("中删除。")]),n("li",[e._v("更新节点：新的"),n("code",[e._v("VNode")]),e._v("和旧的"),n("code",[e._v("oldVNode")]),e._v("中都有，就以新的"),n("code",[e._v("VNode")]),e._v("为准，更新旧的"),n("code",[e._v("oldVNode")]),e._v("。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("5.1创建节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("在上篇文章中我们知道 "),n("code",[e._v("VNode")]),e._v(" 类可以描述6种类型的节点，而实际上只有3种类型的节点能够被创建并插入到 "),n("code",[e._v("DOM")]),e._v(" 中，它们分别是："),n("strong",[e._v("元素节点")]),e._v("、"),n("strong",[e._v("文本节点")]),e._v("、"),n("strong",[e._v("注释节点")]),e._v("。所以 "),n("code",[e._v("Vue")]),e._v(" 在创建节点的时候会判断在新的 "),n("code",[e._v("VNode")]),e._v(" 中有而旧的 "),n("code",[e._v("oldVNode")]),e._v(" 中没有的这个节点是属于哪种类型的节点，从而调用不同的方法创建并插入到 "),n("code",[e._v("DOM")]),e._v(" 中。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 源码位置: /src/core/vdom/patch.js\nfunction createElm(vnode, parentElm, refElm) {\n    const data = vnode.data\n    const children = vnode.children\n    const tag = vnode.tag\n    if (isDef(tag)) {\n        vnode.elm = nodeOps.createElement(tag, vnode) // 创建元素节点\n        createChildren(vnode, children, insertedVnodeQueue) // 创建元素节点的子节点\n        insert(parentElm, vnode.elm, refElm) // 插入到DOM中\n    } else if (isTrue(vnode.isComment)) {\n        vnode.elm = nodeOps.createComment(vnode.text) // 创建注释节点\n        insert(parentElm, vnode.elm, refElm) // 插入到DOM中\n    } else {\n        vnode.elm = nodeOps.createTextNode(vnode.text) // 创建文本节点\n        insert(parentElm, vnode.elm, refElm) // 插入到DOM中\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("判断是否为元素节点只需判断该"),n("code",[e._v("VNode")]),e._v("节点是否有"),n("code",[e._v("tag")]),e._v("标签即可。如果有"),n("code",[e._v("tag")]),e._v("属性即认为是元素节点，则调用"),n("code",[e._v("createElement")]),e._v("方法创建元素节点，通常元素节点还会有子节点，那就递归遍历创建所有子节点，将所有子节点创建好之后"),n("code",[e._v("insert")]),e._v("插入到当前元素节点里面，最后把当前元素节点插入到"),n("code",[e._v("DOM")]),e._v("中。")]),n("li",[e._v("判断是否为注释节点，只需判断"),n("code",[e._v("VNode")]),e._v("的"),n("code",[e._v("isComment")]),e._v("属性是否为"),n("code",[e._v("true")]),e._v("即可，若为"),n("code",[e._v("true")]),e._v("则为注释节点，则调用"),n("code",[e._v("createComment")]),e._v("方法创建注释节点，再插入到"),n("code",[e._v("DOM")]),e._v("中。")]),n("li",[e._v("如果既不是元素节点，也不是注释节点，那就认为是文本节点，则调用"),n("code",[e._v("createTextNode")]),e._v("方法创建文本节点，再插入到"),n("code",[e._v("DOM")]),e._v("中。")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("代码中的 "),n("code",[e._v("nodeOps")]),e._v(" 是 "),n("code",[e._v("Vue")]),e._v(" 为了跨平台兼容性，对所有节点操作进行了封装，例如 "),n("code",[e._v("nodeOps.createTextNode()")]),e._v(" 在浏览器端等同于 "),n("code",[e._v("document.createTextNode()")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/2.02d5c7b1.png",alt:"img"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("5.2删除节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("如果某些节点再新的 "),n("code",[e._v("VNode")]),e._v(" 中没有而在旧的 "),n("code",[e._v("oldVNode")]),e._v(" 中有，那么就需要把这些节点从旧的 "),n("code",[e._v("oldVNode")]),e._v(" 中删除。删除节点非常简单，只需在要删除节点的父元素上调用 "),n("code",[e._v("removeChild")]),e._v(" 方法即可。源码如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("function removeNode(el) {\n    const parent = nodeOps.parentNode(el) // 获取父节点\n    if (isDef(parent)) {\n        nodeOps.removeChild(parent, el) // 调用父节点的removeChild方法\n    }\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("5.3更新节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t更新节点就是当某些节点在新的 "),n("code",[e._v("VNode")]),e._v(" 和旧的 "),n("code",[e._v("oldVNode")]),e._v(" 中都有时，我们就需要细致比较一下，找出不一样的地方进行更新。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("1）如果 "),n("code",[e._v("VNode")]),e._v(" 和 "),n("code",[e._v("oldVNode")]),e._v(" 均为静态节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("2）如果 "),n("code",[e._v("VNode")]),e._v(" 是文本节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("如果 "),n("code",[e._v("VNode")]),e._v(" 是文本节点即表示这个节点内只包含纯文本，那么只需看 "),n("code",[e._v("oldVNode")]),e._v(" 是否也是文本节点，如果是，那就比较两个文本是否不同，如果不同则把 "),n("code",[e._v("oldVNode")]),e._v(" 里的文本改成跟 "),n("code",[e._v("VNode")]),e._v(" 的文本一样。如果 "),n("code",[e._v("oldVNode")]),e._v(" 不是文本节点，那么不论它是什么，直接调用 "),n("code",[e._v("setTextNode")]),e._v(" 方法把它改成文本节点，并且文本内容跟 "),n("code",[e._v("VNode")]),e._v(" 相同。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("3）如果 "),n("code",[e._v("VNode")]),e._v(" 是元素节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("如果 "),n("code",[e._v("VNode")]),e._v(" 是元素节点，则又细分以下两种情况：")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[n("p",[e._v("该节点包含子节点")]),n("p",[e._v("如果新的节点内包含了子节点，那么此时要看旧的节点是否包含子节点，如果旧的节点里也包含了子节点，那就需要递归对比更新子节点；如果旧的节点里不包含子节点，那么这个旧节点有可能是空节点或者是文本节点，如果旧的节点是空节点就把新的节点里的子节点创建一份然后插入到旧的节点里面，如果旧的节点是文本节点，则把文本清空，然后把新的节点里的子节点创建一份然后插入到旧的节点里面。")])]),n("li",[n("p",[e._v("该节点不包含子节点")]),n("p",[e._v("如果该节点不包含子节点，同时它又不是文本节点，那就说明该节点是个空节点，那就好办了，不管旧节点之前里面都有啥，直接清空即可。")])])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 更新节点\nfunction patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    // vnode与oldVnode是否完全一样？若是，退出程序\n    if (oldVnode === vnode) {\n        return\n    }\n    const elm = vnode.elm = oldVnode.elm\n\n    // vnode与oldVnode是否都是静态节点？若是，退出程序\n    if (isTrue(vnode.isStatic) &&\n        isTrue(oldVnode.isStatic) &&\n        vnode.key === oldVnode.key &&\n        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n        return\n    }\n\n    const oldCh = oldVnode.children\n    const ch = vnode.children\n    // vnode有text属性？若没有：\n    if (isUndef(vnode.text)) {\n        // vnode的子节点与oldVnode的子节点是否都存在？\n        if (isDef(oldCh) && isDef(ch)) {\n            // 若都存在，判断子节点是否相同，不同则更新子节点\n            if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n        }\n        // 若只有vnode的子节点存在\n        else if (isDef(ch)) {\n            /**\n             * 判断oldVnode是否有文本？\n             * 若没有，则把vnode的子节点添加到真实DOM中\n             * 若有，则清空Dom中的文本，再把vnode的子节点添加到真实DOM中\n             */\n            if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n            addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n        }\n        // 若只有oldnode的子节点存在\n        else if (isDef(oldCh)) {\n            // 清空DOM中的子节点\n            removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n        }\n        // 若vnode和oldnode都没有子节点，但是oldnode中有文本\n        else if (isDef(oldVnode.text)) {\n            // 清空oldnode文本\n            nodeOps.setTextContent(elm, '')\n        }\n        // 上面两个判断一句话概括就是，如果vnode中既没有text，也没有子节点，那么对应的oldnode中有什么就清空什么\n    }\n    // 若有，vnode的text属性与oldVnode的text属性是否相同？\n    else if (oldVnode.text !== vnode.text) {\n        // 若不相同：则用vnode的text替换真实DOM的文本\n        nodeOps.setTextContent(elm, vnode.text)\n    }\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/3.7b0442aa.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t另外，你可能注意到了，对于更新节点中，如果新旧 "),n("code",[e._v("VNode")]),e._v(" 里都包含了子节点，我们就需要细致的去更新子节点，对于子节点的更新在代码里调用了 "),n("code",[e._v("updateChildren")]),e._v(" 来处理的。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[n("strong",[e._v("4）新旧 "),n("code",[e._v("VNode")]),e._v(" 都包含有子节点")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t当新的 "),n("code",[e._v("VNode")]),e._v(" 与旧的 "),n("code",[e._v("oldVNode")]),e._v(" 都是元素节点并且都包含子节点时，那么这两个节点的 "),n("code",[e._v("VNode")]),e._v(" 实例上的 "),n("code",[e._v("children")]),e._v(" 属性就是所包含的子节点数组。我们把新的 "),n("code",[e._v("VNode")]),e._v(" 上的子节点数组记为 "),n("code",[e._v("newChildren")]),e._v(" ，把旧的 "),n("code",[e._v("oldVNode")]),e._v(" 上的子节点数组记为 "),n("code",[e._v("oldChildren")]),e._v(" ，我们把 "),n("code",[e._v("newChildren")]),e._v(" 里面的元素与 "),n("code",[e._v("oldChildren")]),e._v(" 里的元素一一进行对比，对比两个子节点数组肯定是要通过循环，外层循环 "),n("code",[e._v("newChildren")]),e._v(" 数组，内层循环 "),n("code",[e._v("oldChildren")]),e._v(" 数组，每循环外层 "),n("code",[e._v("newChildren")]),e._v(" 数组里的一个子节点，就去内层 "),n("code",[e._v("oldChildren")]),e._v(" 数组里找看有没有与之相同的子节点，伪代码如下：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("for (let i = 0; i < newChildren.length; i++) {\n    const newChild = newChildren[i];\n    for (let j = 0; j < oldChildren.length; j++) {\n        const oldChild = oldChildren[j];\n        if (newChild === oldChild) {\n            // ...\n        }\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[n("p",[e._v("创建子节点")]),n("p",[e._v("如果 "),n("code",[e._v("newChildren")]),e._v(" 里面的某个子节点在 "),n("code",[e._v("oldChildren")]),e._v(" 里找不到与之相同的子节点，那么说明 "),n("code",[e._v("newChildren")]),e._v(" 里面的这个子节点是之前没有的，是需要此次新增的节点，那么就创建子节点。")])]),n("li",[n("p",[e._v("删除子节点")]),n("p",[e._v("如果把 "),n("code",[e._v("newChildren")]),e._v(" 里面的每一个子节点都循环完毕后，发现在 "),n("code",[e._v("oldChildren")]),e._v(" 还有未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。")])]),n("li",[n("p",[e._v("移动子节点")]),n("p",[e._v("如果 "),n("code",[e._v("newChildren")]),e._v(" 里面的某个子节点在 "),n("code",[e._v("oldChildren")]),e._v(" 里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以 "),n("code",[e._v("newChildren")]),e._v(" 里子节点的位置为基准，调整 "),n("code",[e._v("oldChildren")]),e._v(" 里该节点的位置，使之与在 "),n("code",[e._v("newChildren")]),e._v(" 里的位置相同。")])]),n("li",[n("p",[e._v("更新节点")]),n("p",[e._v("如果 "),n("code",[e._v("newChildren")]),e._v(" 里面的某个子节点在 "),n("code",[e._v("oldChildren")]),e._v(" 里找到了与之相同的子节点，并且所处的位置也相同，那么就更新 "),n("code",[e._v("oldChildren")]),e._v(" 里该节点，使之与 "),n("code",[e._v("newChildren")]),e._v(" 里的该节点相同。")]),n("p",[e._v("OK，到这里，逻辑就相对清晰了，接下来我们只需分门别类的处理这四种情况就好了。")])])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t如果 "),n("code",[e._v("newChildren")]),e._v(" 里面的某个子节点在 "),n("code",[e._v("oldChildren")]),e._v(" 里找不到与之相同的子节点，那么说明 "),n("code",[e._v("newChildren")]),e._v(" 里面的这个子节点是之前没有的，是需要此次新增的节点，那么我们就创建这个节点，创建好之后再把它插入到 "),n("code",[e._v("DOM")]),e._v(" 中合适的位置。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("那么创建好之后如何插入到 "),n("code",[e._v("DOM")]),e._v(" 中的合适的位置呢？显然，把节点插入到 "),n("code",[e._v("DOM")]),e._v(" 中是很容易的，找到合适的位置是关键。接下来我们分析一下如何找这个合适的位置。我们看下面这个图：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/4.cb62f1aa.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t上图中左边是新的 "),n("code",[e._v("VNode")]),e._v(" ，右边是旧的 "),n("code",[e._v("oldVNode")]),e._v(" ，同时也是真实的 "),n("code",[e._v("DOM")]),e._v(" 。这个图意思是当我们循环 "),n("code",[e._v("newChildren")]),e._v(" 数组里面的子节点，前两个子节点都在 "),n("code",[e._v("oldChildren")]),e._v(" 里找到了与之对应的子节点，那么我们将其处理，处理过后把它们标志为已处理，当循环到 "),n("code",[e._v("newChildren")]),e._v(" 数组里第三个子节点时，发现在 "),n("code",[e._v("oldChildren")]),e._v(" 里找不到与之对应的子节点，那么我们就需要创建这个节点，创建好之后我们发现这个节点本是 "),n("code",[e._v("newChildren")]),e._v(" 数组里左起第三个子节点，那么我们就把创建好的节点插入到真实 "),n("code",[e._v("DOM")]),e._v(" 里的第三个节点位置，也就是所有已处理节点之后，OK，此时我们拍手称快，所有已处理节点之后就是我们要找的合适的位置，但是真的是这样吗？我们再来看下面这个图：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/5.bcb4dcee.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t假如我们按照上面的方法把第三个节点插入到所有已处理节点之后，此时如果第四个节点也在 "),n("code",[e._v("oldChildren")]),e._v(" 里找不到与之对应的节点，也是需要创建的节点，那么当我们把第四个节点也按照上面的说的插入到已处理节点之后，发现怎么插入到第三个位置了，可明明这个节点在 "),n("code",[e._v("newChildren")]),e._v(" 数组里是第四个啊！")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("所以，"),n("strong",[e._v("合适的位置是所有未处理节点之前，而并非所有已处理节点之后")]),e._v("。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t如果把 "),n("code",[e._v("newChildren")]),e._v(" 里面的每一个子节点都循环一遍，能在 "),n("code",[e._v("oldChildren")]),e._v(" 数组里找到的就处理它，找不到的就新增，直到把 "),n("code",[e._v("newChildren")]),e._v(" 里面所有子节点都过一遍后，发现在 "),n("code",[e._v("oldChildren")]),e._v(" 还存在未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("如果 "),n("code",[e._v("newChildren")]),e._v(" 里面的某个子节点在 "),n("code",[e._v("oldChildren")]),e._v(" 里找到了与之相同的子节点，并且所处的位置也相同，那么就更新 "),n("code",[e._v("oldChildren")]),e._v(" 里该节点，使之与 "),n("code",[e._v("newChildren")]),e._v(" 里的该节点相同。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("如果 "),n("code",[e._v("newChildren")]),e._v(" 里面的某个子节点在 "),n("code",[e._v("oldChildren")]),e._v(" 里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以 "),n("code",[e._v("newChildren")]),e._v(" 里子节点的位置为基准，调整 "),n("code",[e._v("oldChildren")]),e._v(" 里该节点的位置，使之与在 "),n("code",[e._v("newChildren")]),e._v(" 里的位置相同。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/6.b9621b4d.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在上图中，绿色的两个节点是相同节点但是所处位置不同，即 "),n("code",[e._v("newChildren")]),e._v(" 里面的第三个子节点与真实 "),n("code",[e._v("DOM")]),e._v(" 即 "),n("code",[e._v("oldChildren")]),e._v(" 里面的第四个子节点相同但是所处位置不同，按照上面所说的，我们应该以 "),n("code",[e._v("newChildren")]),e._v(" 里子节点的位置为基准，调整 "),n("code",[e._v("oldChildren")]),e._v(" 里该节点的位置，所以我们应该把真实 "),n("code",[e._v("DOM")]),e._v(" 即 "),n("code",[e._v("oldChildren")]),e._v(" 里面的第四个节点移动到第三个节点的位置，通过上图中的标注我们不难发现，"),n("strong",[e._v("所有未处理节点之前就是我们要移动的目的位置")]),e._v("。如果此时你说那可不可以移动到所有已处理节点之后呢？那就又回到了更新节点时所遇到的那个问题了：如果前面有新增的节点呢？")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("// 源码位置： /src/core/vdom/patch.js\n\nif (isUndef(idxInOld)) { // 如果在oldChildren里找不到当前循环的newChildren里的子节点\n    // 新增节点并插入到合适位置\n    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n} else {\n    // 如果在oldChildren里找到了当前循环的newChildren里的子节点\n    vnodeToMove = oldCh[idxInOld]\n    // 如果两个节点相同\n    if (sameVnode(vnodeToMove, newStartVnode)) {\n        // 调用patchVnode更新节点\n        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)\n        oldCh[idxInOld] = undefined\n        // canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动\n        canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n    }\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t以上代码中，首先判断在 "),n("code",[e._v("oldChildren")]),e._v(" 里能否找到当前循环的 "),n("code",[e._v("newChildren")]),e._v(" 里的子节点，如果找不到，那就是新增节点并插入到合适位置；如果找到了，先对比两个节点是否相同，若相同则先调用 "),n("code",[e._v("patchVnode")]),e._v(" 更新节点，更新完之后再看是否需要移动节点，注意，源码里在判断是否需要移动子节点时用了简写的方式，下面这两种写法是等价的：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n// 等同于\nif (canMove) {\n    nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t假如我们现有一份新的 "),n("code",[e._v("newChildren")]),e._v(" 数组和旧的 "),n("code",[e._v("oldChildren")]),e._v(" 数组，如下所示：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("newChildren = ['新子节点1', '新子节点2', '新子节点3', '新子节点4']\noldChildren = ['旧子节点1', '旧子节点2', '旧子节点3', '旧子节点4']\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t如果按照优化之前的解决方案，那么我们接下来的操作应该是这样的：先循环 "),n("code",[e._v("newChildren")]),e._v(" 数组，拿到第一个新子节点1，然后用第一个新子节点1去跟 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的旧子节点逐一对比，如果运气好一点，刚好 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的第一个旧子节点1与第一个新子节点1相同，那就皆大欢喜，直接处理，不用再往下循环了。那如果运气坏一点，直到循环到 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的第四个旧子节点4才与第一个新子节点1相同，那此时就会多循环了4次。我们不妨把情况再设想的极端一点，如果 "),n("code",[e._v("newChildren")]),e._v(" 数组和 "),n("code",[e._v("oldChildren")]),e._v(" 数组里前三个节点都没有变化，只是第四个节点发生了变化，那么我们就会循环16次，只有在第16次循环的时候才发现新节点4与旧节点4相同，进行更新，如下图所示：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/7.057d7609.jpg",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t那么我们该怎么优化呢？其实我们可以这样想，我们不要按顺序去循环 "),n("code",[e._v("newChildren")]),e._v(" 和 "),n("code",[e._v("oldChildren")]),e._v(" 这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[e._v("先把"),n("code",[e._v("newChildren")]),e._v("数组里的所有未处理子节点的第一个子节点和"),n("code",[e._v("oldChildren")]),e._v("数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；")]),n("li",[e._v("如果不同，再把"),n("code",[e._v("newChildren")]),e._v("数组里所有未处理子节点的最后一个子节点和"),n("code",[e._v("oldChildren")]),e._v("数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；")]),n("li",[e._v("如果不同，再把"),n("code",[e._v("newChildren")]),e._v("数组里所有未处理子节点的最后一个子节点和"),n("code",[e._v("oldChildren")]),e._v("数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将"),n("code",[e._v("oldChildren")]),e._v("数组里的该节点移动到与"),n("code",[e._v("newChildren")]),e._v("数组里节点相同的位置；")]),n("li",[e._v("如果不同，再把"),n("code",[e._v("newChildren")]),e._v("数组里所有未处理子节点的第一个子节点和"),n("code",[e._v("oldChildren")]),e._v("数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将"),n("code",[e._v("oldChildren")]),e._v("数组里的该节点移动到与"),n("code",[e._v("newChildren")]),e._v("数组里节点相同的位置；")]),n("li",[e._v("最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/8.e4c85c40.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ul",[n("li",[n("code",[e._v("newChildren")]),e._v("数组里的所有未处理子节点的第一个子节点称为：新前；")]),n("li",[n("code",[e._v("newChildren")]),e._v("数组里的所有未处理子节点的最后一个子节点称为：新后；")]),n("li",[n("code",[e._v("oldChildren")]),e._v("数组里的所有未处理子节点的第一个子节点称为：旧前；")]),n("li",[n("code",[e._v("oldChildren")]),e._v("数组里的所有未处理子节点的最后一个子节点称为：旧后；")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t把 "),n("code",[e._v("newChildren")]),e._v(" 数组里的所有未处理子节点的第一个子节点和 "),n("code",[e._v("oldChildren")]),e._v(" 数组里所有未处理子节点的第一个子节点做比对，如果相同，那好极了，直接进入之前文章中说的更新节点的操作并且由于新前与旧前两个节点的位置也相同，无需进行节点移动操作；如果不同，没关系，再尝试后面三种情况。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/9.e017b452.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t把 "),n("code",[e._v("newChildren")]),e._v(" 数组里所有未处理子节点的最后一个子节点和 "),n("code",[e._v("oldChildren")]),e._v(" 数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作并且由于新后与旧后两个节点的位置也相同，无需进行节点移动操作；如果不同，继续往后尝试。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/10.cf98adc0.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t把 "),n("code",[e._v("newChildren")]),e._v(" 数组里所有未处理子节点的最后一个子节点和 "),n("code",[e._v("oldChildren")]),e._v(" 数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的该节点移动到与 "),n("code",[e._v("newChildren")]),e._v(" 数组里节点相同的位置；")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/11.2ddb5ee5.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t此时，出现了移动节点的操作，移动节点最关键的地方在于找准要移动的位置。我们一再强调，"),n("strong",[e._v("更新节点要以新VNode为基准，然后操作旧的oldVNode，使之最后旧的oldVNode与新的VNode相同")]),e._v("。那么现在的情况是： "),n("code",[e._v("newChildren")]),e._v(" 数组里的最后一个子节点与 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的第一个子节点相同，那么我们就应该在 "),n("code",[e._v("oldChildren")]),e._v(" 数组里把第一个子节点移动到最后一个子节点的位置，如下图：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/12.bace2f7f.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t从图中不难看出，我们要把 "),n("code",[e._v("oldChildren")]),e._v(" 数组里把第一个子节点移动到数组中"),n("strong",[e._v("所有未处理节点之后")]),e._v("。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t把 "),n("code",[e._v("newChildren")]),e._v(" 数组里所有未处理子节点的第一个子节点和 "),n("code",[e._v("oldChildren")]),e._v(" 数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的该节点移动到与 "),n("code",[e._v("newChildren")]),e._v(" 数组里节点相同的位置；")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/13.98dbc208.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t同样，这种情况的节点移动位置逻辑与“新后与旧前”的逻辑类似，那就是 "),n("code",[e._v("newChildren")]),e._v(" 数组里的第一个子节点与 "),n("code",[e._v("oldChildren")]),e._v(" 数组里的最后一个子节点相同，那么我们就应该在 "),n("code",[e._v("oldChildren")]),e._v(" 数组里把最后一个子节点移动到第一个子节点的位置，如下图：")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/14.18c1c6dd.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t从图中不难看出，我们要把 "),n("code",[e._v("oldChildren")]),e._v(" 数组里把最后一个子节点移动到数组中"),n("strong",[e._v("所有未处理节点之前")]),e._v("。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v('// 循环更新子节点\nfunction updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0 // oldChildren开始索引\n    let oldEndIdx = oldCh.length - 1 // oldChildren结束索引\n    let oldStartVnode = oldCh[0] // oldChildren中所有未处理节点中的第一个\n    let oldEndVnode = oldCh[oldEndIdx] // oldChildren中所有未处理节点中的最后一个\n\n    let newStartIdx = 0 // newChildren开始索引\n    let newEndIdx = newCh.length - 1 // newChildren结束索引\n    let newStartVnode = newCh[0] // newChildren中所有未处理节点中的第一个\n    let newEndVnode = newCh[newEndIdx] // newChildren中所有未处理节点中的最后一个\n\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    if (process.env.NODE_ENV !== \'production\') {\n        checkDuplicateKeys(newCh)\n    }\n\n    // 以"新前"、"新后"、"旧前"、"旧后"的方式开始比对节点\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (isUndef(oldStartVnode)) {\n            oldStartVnode = oldCh[++oldStartIdx] // 如果oldStartVnode不存在，则直接跳过，比对下一个\n        } else if (isUndef(oldEndVnode)) {\n            oldEndVnode = oldCh[--oldEndIdx]\n        } else if (sameVnode(oldStartVnode, newStartVnode)) {\n            // 如果新前与旧前节点相同，就把两个节点进行patch更新\n            patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)\n            oldStartVnode = oldCh[++oldStartIdx]\n            newStartVnode = newCh[++newStartIdx]\n        } else if (sameVnode(oldEndVnode, newEndVnode)) {\n            // 如果新后与旧后节点相同，就把两个节点进行patch更新\n            patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)\n            oldEndVnode = oldCh[--oldEndIdx]\n            newEndVnode = newCh[--newEndIdx]\n        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n            // 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后\n            patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)\n            canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n            oldStartVnode = oldCh[++oldStartIdx]\n            newEndVnode = newCh[--newEndIdx]\n        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n            // 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前\n            patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)\n            canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n            oldEndVnode = oldCh[--oldEndIdx]\n            newStartVnode = newCh[++newStartIdx]\n        } else {\n            // 如果不属于以上四种情况，就进行常规的循环比对patch\n            if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n            idxInOld = isDef(newStartVnode.key) ?\n                oldKeyToIdx[newStartVnode.key] :\n                findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n            // 如果在oldChildren里找不到当前循环的newChildren里的子节点\n            if (isUndef(idxInOld)) { // New element\n                // 新增节点并插入到合适位置\n                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n            } else {\n                // 如果在oldChildren里找到了当前循环的newChildren里的子节点\n                vnodeToMove = oldCh[idxInOld]\n                // 如果两个节点相同\n                if (sameVnode(vnodeToMove, newStartVnode)) {\n                    // 调用patchVnode更新节点\n                    patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)\n                    oldCh[idxInOld] = undefined\n                    // canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动\n                    canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n                } else {\n                    // same key but different element. treat as new element\n                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n                }\n            }\n            newStartVnode = newCh[++newStartIdx]\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        /**\n         * 如果oldChildren比newChildren先循环完毕，\n         * 那么newChildren里面剩余的节点都是需要新增的节点，\n         * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中\n         */\n        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n    } else if (newStartIdx > newEndIdx) {\n        /**\n         * 如果newChildren比oldChildren先循环完毕，\n         * 那么oldChildren里面剩余的节点都是需要删除的节点，\n         * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除\n         */\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n    }\n}\n')])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",[n("li",[e._v("如果"),n("code",[e._v("oldStartVnode")]),e._v("不存在，则直接跳过，将"),n("code",[e._v("oldStartIdx")]),e._v("加1，比对下一个")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v('// 以"新前"、"新后"、"旧前"、"旧后"的方式开始比对节点\nwhile (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]\n    }\n}\n')])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"2"}},[n("li",[e._v("如果"),n("code",[e._v("oldEndVnode")]),e._v("不存在，则直接跳过，将"),n("code",[e._v("oldEndIdx")]),e._v("减1，比对前一个")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("else if (isUndef(oldEndVnode)) {\n    oldEndVnode = oldCh[--oldEndIdx]\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"3"}},[n("li",[e._v("如果新前与旧前节点相同，就把两个节点进行"),n("code",[e._v("patch")]),e._v("更新，同时"),n("code",[e._v("oldStartIdx")]),e._v("和"),n("code",[e._v("newStartIdx")]),e._v("都加1，后移一个位置")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("else if (sameVnode(oldStartVnode, newStartVnode)) {\n    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)\n    oldStartVnode = oldCh[++oldStartIdx]\n    newStartVnode = newCh[++newStartIdx]\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"4"}},[n("li",[e._v("如果新后与旧后节点相同，就把两个节点进行"),n("code",[e._v("patch")]),e._v("更新，同时"),n("code",[e._v("oldEndIdx")]),e._v("和"),n("code",[e._v("newEndIdx")]),e._v("都减1，前移一个位置")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("else if (sameVnode(oldEndVnode, newEndVnode)) {\n    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)\n    oldEndVnode = oldCh[--oldEndIdx]\n    newEndVnode = newCh[--newEndIdx]\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"5"}},[n("li",[e._v("如果新后与旧前节点相同，先把两个节点进行"),n("code",[e._v("patch")]),e._v("更新，然后把旧前节点移动到"),n("code",[e._v("oldChilren")]),e._v("中所有未处理节点之后，最后把"),n("code",[e._v("oldStartIdx")]),e._v("加1，后移一个位置，"),n("code",[e._v("newEndIdx")]),e._v("减1，前移一个位置")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("else if (sameVnode(oldStartVnode, newEndVnode)) {\n    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)\n    canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n    oldStartVnode = oldCh[++oldStartIdx]\n    newEndVnode = newCh[--newEndIdx]\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"6"}},[n("li",[e._v("如果新前与旧后节点相同，先把两个节点进行"),n("code",[e._v("patch")]),e._v("更新，然后把旧后节点移动到"),n("code",[e._v("oldChilren")]),e._v("中所有未处理节点之前，最后把"),n("code",[e._v("newStartIdx")]),e._v("加1，后移一个位置，"),n("code",[e._v("oldEndIdx")]),e._v("减1，前移一个位置")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)\n    canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n    oldEndVnode = oldCh[--oldEndIdx]\n    newStartVnode = newCh[++newStartIdx]\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"7"}},[n("li",[n("p",[e._v("如果不属于以上四种情况，就进行常规的循环比对patch")])]),n("li",[n("p",[e._v("如果在循环中，"),n("code",[e._v("oldStartIdx")]),e._v("大于"),n("code",[e._v("oldEndIdx")]),e._v("了，那就表示"),n("code",[e._v("oldChildren")]),e._v("比"),n("code",[e._v("newChildren")]),e._v("先循环完毕，那么"),n("code",[e._v("newChildren")]),e._v("里面剩余的节点都是需要新增的节点，把"),n("code",[e._v("[newStartIdx, newEndIdx]")]),e._v("之间的所有节点都插入到"),n("code",[e._v("DOM")]),e._v("中")])])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("if (oldStartIdx > oldEndIdx) {\n    refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("ol",{attrs:{start:"9"}},[n("li",[e._v("如果在循环中，"),n("code",[e._v("newStartIdx")]),e._v("大于"),n("code",[e._v("newEndIdx")]),e._v("了，那就表示"),n("code",[e._v("newChildren")]),e._v("比"),n("code",[e._v("oldChildren")]),e._v("先循环完毕，那么"),n("code",[e._v("oldChildren")]),e._v("里面剩余的节点都是需要删除的节点，把"),n("code",[e._v("[oldStartIdx, oldEndIdx]")]),e._v("之间的所有节点都删除")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",{staticClass:"language-javascript"},[this._v("else if (newStartIdx > newEndIdx) {\n    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n}\n")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t在本篇文章中我们介绍了 "),n("code",[e._v("Vue")]),e._v(" 中的 "),n("code",[e._v("DOM-Diff")]),e._v(" 算法：patch过程。我们先介绍了算法的整个思想流程，然后通过梳理算法思想，了解了整个 "),n("code",[e._v("patch")]),e._v(" 过程干了三件事，分别是：创建节点，删除节点，更新节点。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("​\t以上就是 "),n("code",[e._v("Vue")]),e._v(" 中的 "),n("code",[e._v("patch")]),e._v(" 过程，即 "),n("code",[e._v("DOM-Diff")]),e._v(" 算法所有内容了，到这里相信你再读这部分源码的时候就有比较清晰的思路了。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("同一层级的一组节点，他们可以通过唯一的id进行区分。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1158910/201806/1158910-20180613233005892-1644399608.png",alt:"img"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点了。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1158910/201806/1158910-20180613233104766-682005837.png",alt:"img"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1158910/201806/1158910-20180613233130331-1916544311.png",alt:"img"}})])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[this._v("所以我们"),e("strong",[this._v("需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1158910/201806/1158910-20180613233246652-1480583557.png",alt:"img"}})])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("所以一句话，"),n("strong",[e._v("key的作用主要是为了高效的更新虚拟DOM")]),e._v("。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("第一个维度是权限问题，只要涉及到权限相关的展示无疑要用 "),n("code",[e._v("v-if")]),e._v(" ，")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("第二个维度在没有权限限制下根据用户点击的频次选择，频繁切换的使用 "),n("code",[e._v("v-show")]),e._v(" ，不频繁切换的使用 "),n("code",[e._v("v-if")]),e._v(" ，")])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("这里要说的优化点在于减少页面中 dom 总数，我比较倾向于使用 "),n("code",[e._v("v-if")]),e._v(" ，因为减少了 dom 数量，加快首屏渲染，至于性能方面我感觉肉眼看不出来切换的渲染过程，也不会影响用户的体验。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("code",[this._v('v-if="isShow && isAdmin && (a || b)"')]),this._v(" ，这种表达式虽说可以识别，但是不是长久之计，当看着不舒服时，适当的写到 methods 和 computed 里面封装成一个方法，这样的好处是方便我们在多处判断相同的表达式，其他权限相同的元素再判断展示的时候调用同一个方法即可。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("p",[e("strong",[this._v("运用场景：")])])},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("p",[e._v("Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够"),n("strong",[e._v("很明显的减少组件初始化的时间")]),e._v("，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。")])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",[this._v("//Object.freeze 方法冻结对象\nthis.data = Object.freeze(res.data);\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",[this._v("data(){\n    return {\n        timer: null // 定时器名称\n    }\n}，\nmethods： {\n    this.timer = setInterval(()=>{\n        // 执行定时器操作 \n    }, 500)\n}，\nbeforeDestroy() {\n    clearInterval(this.timer);        \n    this.timer = null;\n}\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",[this._v("const timer = setInterval(() =>{    \n    // 执行定时器操作               \n}, 500);            \n// 通过$once来监听定时器，在beforeDestroy钩子可以被清除。\nthis.$once('hook:beforeDestroy', () => {            \n    clearInterval(timer);                                    \n})\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",[this._v("import Vue from 'vue'\nimport Router from 'vue-router'\n// import HelloWorld from '@/components/HelloWorld'\nVue.use(Router)\nexport default new Router({\n  routes: [\n//     {\n//       path: '/',\n//       name: 'HelloWorld',\n//       component: HelloWorld\n//     }\n        {\n          path: '/',\n          name: 'HelloWorld',\n          component: () => import('@/components/HelloWorld.vue')\n        }\n  ]\n}) \n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",[this._v("import echarts from 'echarts' //引入echarts\nVue.prototype.$echarts = echarts //引入组件\n")])])},function(){var e=this.$createElement,e=this._self._c||e;return e("pre",[e("code",[this._v("//引入基本模板\nlet echarts = require('echarts/lib/echarts')\n \n// 引入折线图等组件\nrequire('echarts/lib/chart/line')\nrequire('echarts/lib/chart/bar')\nrequire('echarts/lib/chart/radar')\n\n// 引入提示框和title组件，图例\nrequire('echarts/lib/component/tooltip')\nrequire('echarts/lib/component/title')\nrequire('echarts/lib/component/legend')\nrequire('echarts/lib/component/legendScroll')//图例翻译滚动\n\nVue.prototype.$echarts = echarts\n")])])}],o=t(1),r=Object(o.a)({},function(){var e=this,n=e.$createElement,n=e._self._c||n;return n("section",{staticClass:"content aex-doc"},[e._m(0),e._m(1),n("p",[e._v("生命周期流程图：")]),e._m(2),e._m(3),e._m(4),e._m(5),e._m(6),e._m(7),e._m(8),e._m(9),n("p",[e._v("我们先来打通HTML与Vue模板的关系。")]),e._m(10),n("p",[e._v("​\t整个Vue应用被挂载到页面上id为app的节点上，传入的模板字符串是"),n("App"),e._v("。Vue会解析组件App的模板来替换该标签。在解析App的模板时发现它又引入了另一个组件MyComponent，于是Vue继续解析MyComponent的模板，将解析结果替换到App组件模板内。全部解析之后会得到这样一个模板：")],1),e._m(11),n("p",[e._v("​\t这并不是HTML代码，它仍然是Vue模板（只是这里没有定义数据绑定而已）。Vue会用纯JavaScript来描述上述结构，类似下面这样（这不是真正的内部表示，后面我们会看到Vue的真实内部表示）：")]),e._m(12),n("p",[e._v("​\t这里最外部id为app的节点实际上是不存在的，Vue在生成DOM时会替换掉该元素。")]),n("p",[e._v("​\t我们看到，Vue用一个JavaScript对象描述了编译出来的模板（如果有数据绑定，它还会描述模板与数据的绑定关系）。接下来只需要调用原生的DOM方法依次创建这里的每一个节点，然后将它们挂载成一棵DOM子树，并插入页面，就可以得到真正的HTML。我们一般把这个树状JavaScript对象称为虚拟DOM树。下面是上面的JavaScript对象对应的DOM结构：")]),e._m(13),n("p",[e._v("​\t也就是说，通过模板可以得到真实HTML的JavaScript对象表示，然后调用原生的DOM方法，借助这个JavaScript对象去生成真实的HTML。")]),n("p",[e._v("这里提出一个问题，方便大家理解：Vue实例只能有一个根元素，为什么要求组件模板也只能有一个根元素？")]),e._m(14),n("p",[e._v("这里我们要先看一看template这个标签，这个标签是HTML5出来的新标签，它有三个特性：")]),e._m(15),n("p",[e._v("但是我们可以通过innerHTML来获取到里面的内容。")]),n("p",[e._v("知道了这个，我们再来看.vue的单文件组件。其实本质上，一个单文件组件会被各种各样的loader处理成为.js文件（因为当你import一个单文件组件并打印出来的时候，是一个vue实例），通过template的任意性我们知道，template包裹的HTML可以写在任何地方，那么对于一个.vue来讲，这个template里面的内容就是会被vue处理为虚拟dom并渲染的内容，导致结果又回到了开始 ：既然一个.vue单文件组件是一个vue实例，那么这个实例的入口在哪里？")]),n("p",[e._v("如果在template下有多个div，那么该如何指定这个vue实例的根入口？\n为了让组件能够正常的生成一个vue实例，那么这个div会被自然的处理成程序的入口。")]),n("p",[e._v("通过这个‘根节点’，来递归遍历整个vue‘树’下的所有节点，并处理为vdom，最后再渲染成真正的HTML，插入在正确的位置。")]),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),e._m(21),e._m(22),n("p",[e._v("​")]),e._m(23),e._m(24),n("p",[e._v("​")]),e._m(25),e._m(26),e._m(27),n("p",[e._v("这三个阶段在源码中分别对应三个模块，下面给出三个模块的源代码在源码中的路径：")]),e._m(28),n("p",[e._v("下面再给出模板编译内部具体流程图，便于理解。流程图如下：")]),e._m(29),e._m(30),e._m(31),n("p",[e._v("​\t另外，文本信息和标签属性信息却又是存在于HTML标签之内的，所以在解析整个模板的时候它的流程应该是这样子的：HTML解析器是主线，先用HTML解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析。如下图所示：")]),e._m(32),e._m(33),e._m(34),e._m(35),e._m(36),e._m(37),e._m(38),e._m(39),e._m(40),e._m(41),e._m(42),e._m(43),e._m(44),e._m(45),e._m(46),e._m(47),e._m(48),n("p",[e._v("上述代码中大致可分为三部分：")]),e._m(49),n("p",[e._v("我们一一来分析：")]),n("p",[e._v("首先定义了几个常量，如下")]),e._m(50),e._m(51),e._m(52),e._m(53),e._m(54),e._m(55),e._m(56),e._m(57),e._m(58),e._m(59),e._m(60),e._m(61),e._m(62),n("p",[e._v("加入如下模板字符串：")]),e._m(63),e._m(64),e._m(65),n("p",[e._v("​\t这样我们就找到了当前被构建节点的父节点。这只是栈的一个用途，它还有另外一个用途，我们再看如下模板字符串：")]),e._m(66),e._m(67),e._m(68),e._m(69),e._m(70),e._m(71),e._m(72),e._m(73),n("p",[e._v("优化阶段其实就干了两件事：")]),e._m(74),e._m(75),e._m(76),n("p",[e._v("具体实现源码如下：（感兴趣的小伙伴可以深入理解！）")]),n("p",[e._v("标记静态节点：从根节点开始，先标记根节点是否为静态节点，然后看根节点如果是元素节点，那么就去向下递归它的子节点，子节点如果还有子节点那就继续向下递归，直到标记完所有节点。")]),e._m(77),e._m(78),e._m(79),e._m(80),e._m(81),e._m(82),e._m(83),e._m(84),n("p",[e._v("假设现有如下模板：")]),n("pre",[n("code",{staticClass:"language-html"},[e._v('<div id="NLRX">\n    <p>Hello '+e._s(e.name)+"</p>\n</div>\n")])]),e._m(85),n("pre",[n("code",{staticClass:"language-javascript"},[e._v("ast = {\n    'type': 1,\n    'tag': 'div',\n    'attrsList': [{\n        'name': 'id',\n        'value': 'NLRX',\n    }],\n    'attrsMap': {\n        'id': 'NLRX',\n    },\n    'static': false,\n    'parent': undefined,\n    'plain': false,\n    'children': [{\n        'type': 1,\n        'tag': 'p',\n        'plain': false,\n        'static': false,\n        'children': [{\n            'type': 2,\n            'expression': '\"Hello \"+_s(name)',\n            'text': 'Hello "+e._s(e.name)+"',\n            'static': false,\n        }]\n    }]\n}\n")])]),e._m(86),e._m(87),e._m(88),e._m(89),e._m(90),e._m(91),e._m(92),e._m(93),e._m(94),e._m(95),e._m(96),e._m(97),e._m(98),e._m(99),e._m(100),e._m(101),e._m(102),e._m(103),e._m(104),e._m(105),e._m(106),e._m(107),e._m(108),e._m(109),e._m(110),e._m(111),e._m(112),e._m(113),e._m(114),e._m(115),e._m(116),e._m(117),e._m(118),e._m(119),e._m(120),e._m(121),e._m(122),n("p",[e._v("通过阅读源码，可以发现通过不同属性的搭配，可以描述出以下几种类型的节点。")]),e._m(123),e._m(124),e._m(125),e._m(126),e._m(127),e._m(128),e._m(129),n("p",[e._v("2）vue实例的_render方法(render方法调用)(src\\core\\instance\\render.js)")]),n("p",[e._v("会获取render函数（可以是用户传递的render函数或者Vue编译生成的render函数）；\n并调用vnode = render.call(vm._renderProxy, vm.$createElement)来生成vnode，源码如下：")]),e._m(130),n("p",[e._v("从vm.$options中获取编译好的函数，然后进行了 vnode = render.call(vm._renderProxy, vm.$createElement)，其中vm._renderProxy就是new Proxy(vm, handler), 把vm做了一层代理")]),n("p",[e._v("vm.$createElement全局搜索一下就知道是在initRender中定义了vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)，如果创建虚拟dom出错，就看有没有renderError函数，做一个错误边界处理，在没有的话，让虚拟dom赋值_parentVnode，_parentVnode如果不是虚拟dom，那么就赋值空节点的虚拟。")]),n("p",[e._v("里面的new Vnode 创建的是一个虚拟dom，其实就是一个装有很多属性的对象，和真实的dom做一个映射")]),e._m(131),e._m(132),e._m(133),e._m(134),n("p",[e._v("createElement首先对传入的参数做了一个重载，如果传入的data没有，后面的参数就往前移动一个位置, 然后调用_createElement，下面我们看看_createElement做了什么")]),n("p",[e._v("首先判断data是不是已经被监听了，根据_*ob_*去判断，如果是的话报一个警告, 然后如果没有传入tag标签，直接返回一个空的虚拟节点")]),n("p",[e._v("接着对childern做一个处理，如果children是一个简单的数组类型，只需要进行一层的数组平拍simpleNormalizeChildren，如果是一个复杂的数组类型则需要进行normalizeChildren(), 这么做的目的就是递归遍历，让节点和子节点全部都生成对应的虚拟dom")]),n("p",[e._v("如果tag是字符串，就通过new Vnode来创建虚拟dom, 如果不是字符串，肯定是组件了，tag为空的情况最开始已经处理了，就执行createComponent来创建一个虚拟dom。")]),e._m(135),e._m(136),e._m(137),e._m(138),e._m(139),n("p",[e._v("​\t可能你感觉有点绕，没关系，我们在说的通俗一点，你可以这样理解：假设你电脑上现在有一份旧的电子版文档，此时老板又给了你一份新的纸质板文档，并告诉你这两份文档内容大部分都是一样的，让你以新的纸质版文档为准，把纸质版文档做一份新的电子版文档发给老板。对于这个任务此时，你应该有两种解决方案：一种方案是不管它旧的文档内容是什么样的，统统删掉，然后对着新的纸质版文档一个字一个字的敲进去，这种方案就是不用费脑，就是受点累也能解决问题。而另外一种方案是以新的纸质版文档为基准，对比看旧的电子版文档跟新的纸质版文档有什么差异，如果某些部分在新的文档里有而旧的文档里没有，那就在旧的文档里面把这些部分加上；如果某些部分在新的文档里没有而旧的文档里有，那就在旧的文档里把这些部分删掉；如果某些部分在新旧文档里都有，那就对比看有没有需要更新的，最后在旧的文档里更新一下，最终达到把旧的文档变成跟手里纸质版文档一样，完美解决。")]),e._m(140),e._m(141),e._m(142),e._m(143),e._m(144),n("p",[e._v("其实判断起来也不难，因为这三种类型的节点其特点非常明显，在源码中是怎么判断的：")]),e._m(145),n("p",[e._v("从上面代码中，我们可以看出：")]),e._m(146),e._m(147),n("p",[e._v("以上就完成了创建节点的操作，其完整流程图如下：")]),e._m(148),e._m(149),e._m(150),e._m(151),e._m(152),n("p",[e._v("​\t创建节点和删除节点都比较简单，而更新节点就相对较为复杂一点了，其实也不算多复杂，只要理清逻辑就能理解了。")]),e._m(153),n("p",[e._v("​\t介绍更新节点之前，我们先知道一个小的概念，就是什么是静态节点？这个之前在模板编译中的第二个阶段，优化阶段就详细提到过，所以这里不做过多解释。")]),e._m(154),n("p",[e._v("我们说了，静态节点无论数据发生任何变化都与它无关，所以都为静态节点的话则直接跳过，无需处理。")]),e._m(155),e._m(156),e._m(157),e._m(158),e._m(159),n("p",[e._v("OK，处理完以上3种情况，更新节点就算基本完成了，接下来我们看下源码中具体是怎么实现的，源码如下：")]),e._m(160),n("p",[e._v("上面代码里注释已经写得很清晰了，接下来我们画流程图来梳理一下整个过程，流程图如下：")]),e._m(161),e._m(162),e._m(163),e._m(164),e._m(165),n("p",[e._v("那么以上这个过程将会存在以下四种情况：")]),e._m(166),n("h2",[e._v("创建子节点")]),e._m(167),n("p",[e._v("创建节点这个很容易，我们在上一篇文章的第三章已经介绍过了，这里就不再赘述了。")]),e._m(168),e._m(169),e._m(170),e._m(171),e._m(172),n("p",[e._v("这就是问题所在，其实，我们应该把新创建的节点插入到所有未处理节点之前，这样以来逻辑才正确。后面不管有多少个新增的节点，每一个都插入到所有未处理节点之前，位置才不会错。")]),e._m(173),n("h2",[e._v("删除子节点")]),e._m(174),n("p",[e._v("删除节点这个也很容易，我们在上一篇文章的第四章已经介绍过了，这里就不再赘述了。")]),n("h2",[e._v("更新子节点")]),e._m(175),n("p",[e._v("关于更新节点，我们在上一篇文章的第五章已经介绍过了，这里就不再赘述了。")]),n("h2",[e._v("移动子节点")]),e._m(176),n("p",[e._v("同样，移动一个节点不难，关键在于该移动到哪，或者说关键在于移动到哪个位置，这个位置才是关键。我们看下图：")]),e._m(177),e._m(178),n("h2",[e._v("回到源码")]),n("p",[e._v("OK，以上就是更新子节点时所要考虑的所有情况了，分析完以后，我们回到源码里看看实际情况是不是我们分析的这样子的，源码如下：")]),e._m(179),e._m(180),e._m(181),n("p",[e._v("​\t最后，我们再思考一个问题：这样双层循环虽然能解决问题，但是如果节点数量很多，这样循环算法的时间复杂度会不会很高？有没有什么可以优化的办法？")]),n("h2",[e._v("算法优化策略")]),e._m(182),e._m(183),e._m(184),e._m(185),n("p",[e._v("​\t上面例子中只有四个子节点，好像还看不出来有什么缺陷，但是当子节点数量很多的时候，算法的时间复杂度就会非常高，很不利于性能提升。")]),e._m(186),e._m(187),n("p",[e._v("其过程如下图所示：")]),e._m(188),n("p",[e._v("在上图中，我们把：")]),e._m(189),n("p",[e._v("OK，有了以上概念以后，下面我们就来看看其具体是如何实施的。")]),n("h2",[e._v("新前与旧前")]),e._m(190),e._m(191),n("h2",[e._v("新后与旧后")]),e._m(192),e._m(193),n("h2",[e._v("新后与旧前")]),e._m(194),e._m(195),e._m(196),e._m(197),e._m(198),n("p",[e._v("如果对比之后发现这两个节点仍不是同一个节点，那就继续尝试最后一种情况。")]),n("h2",[e._v("新前与旧后")]),e._m(199),e._m(200),e._m(201),e._m(202),e._m(203),n("p",[e._v("OK，以上就是子节点对比更新优化策略种的4种情况，如果以上4种情况逐个试遍之后要是还没找到相同的节点，那就再通过之前的循环方式查找。")]),n("h2",[e._v("回到源码")]),n("p",[e._v("​\t思路分析完，逻辑理清之后，我们再回到源码里看看，验证一下源码实现的逻辑是否跟我们分析的一样。源码如下：")]),e._m(204),e._m(205),e._m(206),e._m(207),e._m(208),e._m(209),e._m(210),e._m(211),e._m(212),e._m(213),e._m(214),e._m(215),e._m(216),e._m(217),e._m(218),e._m(219),e._m(220),n("h2",[e._v("总结")]),e._m(221),e._m(222),n("p",[e._v("为了更好地理解vue的diff算法，找一些例子来展示：比如 为什么要给v-for的item设置唯一key值")]),e._m(223),n("p",[e._v("这里我们借用一张图来简单说明一下：")]),e._m(224),n("p",[e._v("当页面的数据发生变化时，Diff算法只会比较同一层级的节点：")]),e._m(225),e._m(226),n("p",[e._v("当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程默认情况下也是遵循以上原则。")]),n("p",[e._v("比如以下这个情况：")]),e._m(227),n("p",[e._v("我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：")]),e._m(228),n("p",[e._v("即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？")]),e._m(229),e._m(230),e._m(231),n("h3",[e._v("7、Vue的一些性能优化")]),n("h3",[e._v("1、v-if 和 v-show")]),n("p",[e._v("v-if 是懒加载，当状态为 true 时才会加载，并且为 false 时不会占用布局空间；")]),n("p",[e._v("v-show 是无论状态是 true 或者是 false，都会进行渲染，并且只是简单地基于 CSS 的 display 属性进行切换，并占据布局空间。对于在项目中，需要频繁调用，不需要权限的显示隐藏，可以选择使用 v-show，可以减少系统的切换开销。")]),n("p",[e._v("在我来看要分两个维度去思考问题：")]),e._m(232),e._m(233),e._m(234),n("h3",[e._v("2、不要在模板里面写过多的表达式与判断")]),e._m(235),n("h3",[e._v("3、v-for 遍历避免同时使用 v-if")]),n("p",[e._v("当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以，不推荐v-if和v-for同时使用，必要情况下可以替换成 computed 属性。")]),n("h3",[e._v("4、computed 和 watch 区分使用场景")]),n("p",[e._v("computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；\n　　watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；")]),e._m(236),n("p",[e._v("1、当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；")]),n("p",[e._v("2、当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch。使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")]),n("h3",[e._v("5、长列表性能优化")]),e._m(237),e._m(238),n("h3",[e._v("6、事件的销毁")]),n("p",[e._v("Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。例如，当我们执行某个计时器的时候，页面销毁的时候我们肯定要把事件销毁，销毁计时器一般有两种方法，我建议第二种方法。")]),n("p",[e._v("方法一、在data函数中定义定时器名称，然后在methods中使用定时器，最后在beforeDestroy()生命周期内清除定时器")]),e._m(239),n("p",[e._v("这个方法有两点不好的地方：")]),n("p",[e._v("1、它需要在这个组件实例中保存这个 timer，如果可以的话最好只有生命周期钩子可以访问到它。这并不算严重的问题，但是它可以被视为杂物。")]),n("p",[e._v("2、我们的建立代码独立于我们的清理代码，这使得我们比较难于程序化的清理我们建立的所有东西。")]),n("p",[e._v("方法二：通过$once这个事件侦听器器在定义完定时器之后的位置来清除定时器")]),e._m(240),n("h3",[e._v("7、对路由组件进行懒加载")]),n("p",[e._v("这里的懒加载是指在访问到对应的组件时才加载它，首屏的时候不加载。这里实现的方法很简单，只要将以前直接import组件的方式改为：const Login = () => import('@/pages/Login’); 即可。")]),n("p",[e._v("Vue 是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。")]),e._m(241),n("h3",[e._v("8、ui框架按需加载")]),n("p",[e._v("比如echars")]),n("p",[e._v("1）全局引入")]),n("p",[e._v("main.js中配置")]),e._m(242),n("p",[e._v("缺点：如果是完整的引入Echarts，会额外的引入其他无用的配置文件，造成应用文件体积过大，资源加载耗时过长，影响用户体验")]),n("p",[e._v("2）按需引入")]),n("p",[e._v("如果是在许多页面中都有用到，就写在main.js中")]),e._m(243),n("p",[e._v("在组建中使用都是一样的，如果只在一个地方使用就直接写在.vue文件中就好啦")]),n("p",[e._v("注：这里用 require 不用 import 引入是因为 import 需要详细的路径。")]),n("h3",[e._v("9、图片资源懒加载")]),n("p",[e._v("对于图片过多的页面，为了加速页面加载速度，可以使用v-lazy之类的懒加载库或者绑定鼠标的scroll事件，滚动到可视区域先再对数据进行加载显示，减少系统加载的数据。这样对于页面加载性能上会有很大的提升，也提高了用户体验。")])])},r,!1,null,null,null);n.default=r.exports},339:function(e,n,t){e.exports=t.p+"static/20200906205828744.efbfd8b.png"},340:function(e,n,t){e.exports=t.p+"static/444.0d18f40.png"},341:function(e,n,t){e.exports=t.p+"static/20200906211151458.735988e.png"},342:function(e,n,t){e.exports=t.p+"static/20200906211828100.7c1e855.png"}}]);