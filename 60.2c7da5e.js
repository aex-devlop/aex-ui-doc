(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{350:function(n,e,t){"use strict";t.r(e);t=t(1),t=Object(t.a)({},function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},[function(){var n=this,e=n.$createElement,e=n._self._c||e;return e("section",{staticClass:"content aex-doc"},[e("p",[n._v("相关文档：")]),e("p",[n._v("https://mikemcl.github.io/decimal.js/")]),e("h1",[n._v("为什么要使用 decimal.js ？")]),e("h2",[n._v("1，浮点/整 数精度计算会有溢出的可能")]),e("h2",[n._v("2，让公式计算的代码具有可读性（加减乘除 、大小等于 的操作）")]),e("h2",[n._v("3，能自定义处理各式小数精度（小数精确至多少位、是否四舍五入、是否保留小数点后的 0 值）")]),e("p",[n._v("这里相对与原生 Math 或 Number 的处理方法，decimaljs 的使用比原生轻松很多。（比如：Number.prototype.toFixed() 的小数在四舍五入上总会让人摸不着头脑）")]),e("pre",[e("code",[n._v("2.35.toFixed(1)           // 返回 '2.4'. Note it rounds up\n\n2.55.toFixed(1)           // 返回 '2.5'. Note it rounds down （卧槽？）\n")])]),e("h1",[n._v("调用方式（使用静态方法 或 实例方法）")]),e("p",[n._v("区别：")]),e("p",[n._v("按照文档的说法，构造方法是调用原型链上的方法，且构造方法的命名比实例方法要简短。以下是相加功能的两种写法。可以按自己的喜好选择。")]),e("p",[n._v("PS：但是我觉得应该要统一用法或规范使用。（构造方法 or 实例方法 二选一）以免后续维护不同同事的代码还要回过头去找api文档的具体意思。")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("// 比如：x, y 相加\nDecimal.add(x, y).add(z) // = x+y+z 当然这里可以使用链式调用\n")])]),e("pre",[e("code",{staticClass:"language-js"},[n._v("// x, y 相加\nconst x = new Decimal(x);\nx.plus(y)\n.plus(z) //  = x+y+z 当然这里可以使用链式调用\n")])]),e("h1",[n._v("坑：")]),e("p",[n._v("常见精确小数点的问题（示例代码一律用实例方法实现）")]),e("p",[n._v("1，小数精确到 n 位，是否控制四舍五入？")]),e("p",[n._v("2，小数精确到 n 位，但 0 位是否应该省略掉？（1 的增强版。即：有效数字 Precision）")]),e("p",[n._v("3，小数去尾，但是否需要做四舍五入？")]),e("p",[n._v("4，如果是负数，又该怎么做四舍五入？")]),e("p",[n._v("在讲解答案前需要了解 rounding（舍去） 这个单词，以及相应配置所对应的意思。")]),e("p",[n._v("这里只介绍常用的：\nROUND_UP => 除了 0 的数进一位 即：123456789 进一位")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.45;\nconst n = new Decimal(defaultNum);\nn.toFixed(1, Decimal.ROUND_UP) // 123.5\n")])]),e("p",[n._v("ROUND_DOWN => 不进位")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.45\nconst n = new Decimal(defaultNum);\nn.toFixed(1, Decimal.ROUND_DOWN) // 123.5\n")])]),e("p",[n._v("ROUND_CEIL => 向正无穷靠近 即：正数进一位")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.44\nconst n = new Decimal(defaultNum);\nn.toFixed(1, Decimal.ROUND_CEIL) // 正数：123.5 负数：-123.4\n")])]),e("p",[n._v("ROUND_FLOOR => 相反 即：负数进一位")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = -123.44\nconst n = new Decimal(defaultNum);\nn.toFixed(1, Decimal.ROUND_FLOOR) // 正数：123.4 负数：-123.5\n")])]),e("p",[n._v("ROUND_HALF_UP => 四舍五入")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.45\nconst n = new Decimal(defaultNum);\nn.toFixed(1, Decimal.ROUND_HALF_UP) // 123.5\n")])]),e("p",[n._v("ROUND_HALF_DOWN => 五舍六入 即：6789 进一位")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.45\nconst n = new Decimal(defaultNum);\nn.toFixed(1, Decimal.ROUND_HALF_UP) // 123.4\n")])]),e("h1",[n._v("答案：")]),e("p",[n._v("1，小数精确到后 n 位:")]),e("p",[n._v("toFixed() // 不够将用 0 补")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.45\nconst n = new Decimal(defaultNum);\nn.toFixed(5) // 123.45000\n")])]),e("p",[n._v("2，接上，如果小数有多余的 0 该怎么去掉")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("new Decimal('123.45000'); // 123.45\n")])]),e("p",[n._v("3，小数去尾，是否做四舍五入\n注意：正数和负数的四舍五入是不同的\n默认的是使用 ROUND_HALF_CEIL 。")]),e("pre",[e("code",{staticClass:"language-js"},[n._v("const defaultNum = 123.5\nconst n = new Decimal(defaultNum);\nn.round(); // 124\n\n// 如果是负数，则应该这么使用\nconst D = Decimal.set({ rounding: Decimal.ROUND_HALF_FLOOR });\nconsole.log(new D(-123.4).round()); // -123\nconsole.log(new D(-123.5).round()); // -124\n\n// 直接去尾，不做四舍五入\nconst defaultNum = 123.5\nconst n = new Decimal(defaultNum);\n// truncated => 分块\nn.truncated(); // 123\n")])])])}],!1,null,null,null),e.default=t.exports}}]);